<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\IR101RC09-G-WG.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\IR101RC09-G-WG.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon May 12 14:09:09 2025
<BR><P>
<H3>Maximum Stack Usage =        760 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
telnet_recv &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[33f]">CPU_IntDis</a>
 <LI><a href="#[340]">CPU_IntEn</a>
 <LI><a href="#[174]">CPU_SR_Save</a>
 <LI><a href="#[177]">CPU_SR_Restore</a>
 <LI><a href="#[341]">CPU_WaitForInt</a>
 <LI><a href="#[342]">CPU_WaitForExcept</a>
 <LI><a href="#[20d]">CPU_CntLeadZeros</a>
 <LI><a href="#[343]">CPU_CntTrailZeros</a>
 <LI><a href="#[344]">CPU_RevBits</a>
 <LI><a href="#[118]">OSStartHighRdy</a>
 <LI><a href="#[1dd]">OSCtxSw</a>
 <LI><a href="#[1d0]">OSIntCtxSw</a>
 <LI><a href="#[d]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SVC_Handler</a><BR>
 <LI><a href="#[c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">DebugMon_Handler</a><BR>
 <LI><a href="#[21]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21]">ADC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[73]">Api_Gpi_Btn_Attach</a> from api_gpio.o(i.Api_Gpi_Btn_Attach) referenced from api_gpio.o(i.Api_Gpio_Init)
 <LI><a href="#[72]">Api_Gpi_Btn_DeInit</a> from api_gpio.o(i.Api_Gpi_Btn_DeInit) referenced from api_gpio.o(i.Api_Gpio_Init)
 <LI><a href="#[74]">Api_Gpi_Btn_Event</a> from api_gpio.o(i.Api_Gpi_Btn_Event) referenced from api_gpio.o(i.Api_Gpio_Init)
 <LI><a href="#[71]">Api_Gpi_Btn_Init</a> from api_gpio.o(i.Api_Gpi_Btn_Init) referenced from api_gpio.o(i.Api_Gpio_Init)
 <LI><a href="#[75]">Api_Gpio_Ctl_Period</a> from api_gpio.o(i.Api_Gpio_Ctl_Period) referenced from api_gpio.o(i.Api_Gpio_Init)
 <LI><a href="#[f8]">Api_Gpio_Init</a> from api_gpio.o(i.Api_Gpio_Init) referenced from api_gpio.o(init.item.4)
 <LI><a href="#[6b]">Api_Gpio_Read</a> from api_gpio.o(i.Api_Gpio_Read) referenced from api_gpio.o(i.Api_Gpio_Init)
 <LI><a href="#[6d]">Api_Gpio_Toggle</a> from api_gpio.o(i.Api_Gpio_Toggle) referenced from api_gpio.o(i.Api_Gpio_Init)
 <LI><a href="#[6c]">Api_Gpio_Write</a> from api_gpio.o(i.Api_Gpio_Write) referenced from api_gpio.o(i.Api_Gpio_Init)
 <LI><a href="#[70]">Api_Gpo_Ctl</a> from api_gpio.o(i.Api_Gpo_Ctl) referenced from api_gpio.o(i.Api_Gpio_Init)
 <LI><a href="#[6f]">Api_Gpo_Ctl_DeInit</a> from api_gpio.o(i.Api_Gpo_Ctl_DeInit) referenced from api_gpio.o(i.Api_Gpio_Init)
 <LI><a href="#[6e]">Api_Gpo_Ctl_Init</a> from api_gpio.o(i.Api_Gpo_Ctl_Init) referenced from api_gpio.o(i.Api_Gpio_Init)
 <LI><a href="#[76]">Api_Sys_Param_Get</a> from api_sys_param.o(i.Api_Sys_Param_Get) referenced from api_sys_param.o(i.Api_Sys_Param_Init)
 <LI><a href="#[f7]">Api_Sys_Param_Init</a> from api_sys_param.o(i.Api_Sys_Param_Init) referenced from api_sys_param.o(init.item.4)
 <LI><a href="#[79]">Api_Sys_Param_Recovery</a> from api_sys_param.o(i.Api_Sys_Param_Recovery) referenced from api_sys_param.o(i.Api_Sys_Param_Init)
 <LI><a href="#[7a]">Api_Sys_Param_Recovery_Default</a> from api_sys_param.o(i.Api_Sys_Param_Recovery_Default) referenced from api_sys_param.o(i.Api_Sys_Param_Init)
 <LI><a href="#[78]">Api_Sys_Param_Save</a> from api_sys_param.o(i.Api_Sys_Param_Save) referenced from api_sys_param.o(i.Api_Sys_Param_Init)
 <LI><a href="#[77]">Api_Sys_Param_Shadow_Get</a> from api_sys_param.o(i.Api_Sys_Param_Shadow_Get) referenced from api_sys_param.o(i.Api_Sys_Param_Init)
 <LI><a href="#[9]">BusFault_Handler</a> from gd32f4xx_it.o(i.BusFault_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[25]">CAN0_EWMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[23]">CAN0_RX0_IRQHandler</a> from gd32f4xx_it.o(RAMCODE) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[24]">CAN0_RX1_IRQHandler</a> from gd32f4xx_it.o(RAMCODE) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[22]">CAN0_TX_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[51]">CAN1_EWMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4f]">CAN1_RX0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[50]">CAN1_RX1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4e]">CAN1_TX_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[7d]">Cri_EnterCritical</a> from sys_critical.o(i.Cri_EnterCritical) referenced from sys_critical.o(i.Critical_Init)
 <LI><a href="#[7e]">Cri_ExitCritical</a> from sys_critical.o(i.Cri_ExitCritical) referenced from sys_critical.o(i.Critical_Init)
 <LI><a href="#[7b]">Cri_SchedLock</a> from sys_critical.o(i.Cri_SchedLock) referenced from sys_critical.o(i.Critical_Init)
 <LI><a href="#[7c]">Cri_SchedUnlock</a> from sys_critical.o(i.Cri_SchedUnlock) referenced from sys_critical.o(i.Critical_Init)
 <LI><a href="#[f2]">Critical_Init</a> from sys_critical.o(i.Critical_Init) referenced from sys_critical.o(init.item.1)
 <LI><a href="#[5d]">DCI_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel0_IRQHandler</a> from gd32f4xx_it.o(i.DMA0_Channel0_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel1_IRQHandler</a> from gd32f4xx_it.o(i.DMA0_Channel1_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1c]">DMA0_Channel2_IRQHandler</a> from gd32f4xx_it.o(i.DMA0_Channel2_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1d]">DMA0_Channel3_IRQHandler</a> from gd32f4xx_it.o(i.DMA0_Channel3_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1e]">DMA0_Channel4_IRQHandler</a> from gd32f4xx_it.o(i.DMA0_Channel4_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1f]">DMA0_Channel5_IRQHandler</a> from gd32f4xx_it.o(i.DMA0_Channel5_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[20]">DMA0_Channel6_IRQHandler</a> from gd32f4xx_it.o(i.DMA0_Channel6_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3e]">DMA0_Channel7_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[47]">DMA1_Channel0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[48]">DMA1_Channel1_IRQHandler</a> from gd32f4xx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[49]">DMA1_Channel2_IRQHandler</a> from gd32f4xx_it.o(i.DMA1_Channel2_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4a]">DMA1_Channel3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4b]">DMA1_Channel4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[53]">DMA1_Channel5_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[54]">DMA1_Channel6_IRQHandler</a> from gd32f4xx_it.o(i.DMA1_Channel6_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[55]">DMA1_Channel7_IRQHandler</a> from gd32f4xx_it.o(i.DMA1_Channel7_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[fb]">DebugCom_DmaSendPeriodTask</a> from bsp_uart.o(i.DebugCom_DmaSendPeriodTask) referenced from bsp_uart.o(period.item.4)
 <LI><a href="#[c]">DebugMon_Handler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4c]">ENET_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4d]">ENET_WKUP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3f]">EXMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[15]">EXTI0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[37]">EXTI10_15_IRQHandler</a> from gd32f4xx_it.o(i.EXTI10_15_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[16]">EXTI1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[17]">EXTI2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[18]">EXTI3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[19]">EXTI4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[26]">EXTI5_9_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[13]">FMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5f]">FPU_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2f]">I2C0_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2e]">I2C0_EV_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[31]">I2C1_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[30]">I2C1_EV_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[58]">I2C2_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[57]">I2C2_EV_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[67]">IPA_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[d3]">Init_Task</a> from main.o(i.Init_Task) referenced from main.o(i.main)
 <LI><a href="#[82]">Interface_Close</a> from interface.o(i.Interface_Close) referenced from interface.o(i.Interface_Init)
 <LI><a href="#[85]">Interface_Deinit</a> from interface.o(i.Interface_Deinit) referenced from interface.o(i.Interface_Init)
 <LI><a href="#[f3]">Interface_Init</a> from interface.o(i.Interface_Init) referenced from interface.o(init.item.2)
 <LI><a href="#[81]">Interface_Open</a> from interface.o(i.Interface_Open) referenced from interface.o(i.Interface_Init)
 <LI><a href="#[84]">Interface_Read</a> from interface.o(i.Interface_Read) referenced from interface.o(i.Interface_Init)
 <LI><a href="#[83]">Interface_Write</a> from interface.o(i.Interface_Write) referenced from interface.o(i.Interface_Init)
 <LI><a href="#[10]">LVD_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from gd32f4xx_it.o(i.MemManage_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[86]">Monitor_Create</a> from sys_monitor.o(i.Monitor_Create) referenced from sys_monitor.o(i.Monitor_Init)
 <LI><a href="#[87]">Monitor_Delete</a> from sys_monitor.o(i.Monitor_Delete) referenced from sys_monitor.o(i.Monitor_Init)
 <LI><a href="#[88]">Monitor_Enter</a> from sys_monitor.o(i.Monitor_Enter) referenced from sys_monitor.o(i.Monitor_Init)
 <LI><a href="#[89]">Monitor_Exit</a> from sys_monitor.o(i.Monitor_Exit) referenced from sys_monitor.o(i.Monitor_Init)
 <LI><a href="#[f6]">Monitor_Init</a> from sys_monitor.o(i.Monitor_Init) referenced from sys_monitor.o(init.item.3)
 <LI><a href="#[8a]">Monitor_TaskMonitor</a> from sys_monitor.o(i.Monitor_TaskMonitor) referenced from sys_monitor.o(i.Monitor_Init)
 <LI><a href="#[8b]">Mutex_Create</a> from sys_mutex.o(i.Mutex_Create) referenced from sys_mutex.o(i.Mutex_Init)
 <LI><a href="#[8c]">Mutex_Delete</a> from sys_mutex.o(i.Mutex_Delete) referenced from sys_mutex.o(i.Mutex_Init)
 <LI><a href="#[ef]">Mutex_Init</a> from sys_mutex.o(i.Mutex_Init) referenced from sys_mutex.o(init.item.1)
 <LI><a href="#[8d]">Mutex_Lock</a> from sys_mutex.o(i.Mutex_Lock) referenced from sys_mutex.o(i.Mutex_Init)
 <LI><a href="#[8e]">Mutex_Unlock</a> from sys_mutex.o(i.Mutex_Unlock) referenced from sys_mutex.o(i.Mutex_Init)
 <LI><a href="#[6]">NMI_Handler</a> from gd32f4xx_it.o(i.NMI_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[80]">Net_Periodic_Task</a> from sys_base.o(i.Net_Periodic_Task) referenced from main.o(i.Init_Task)
 <LI><a href="#[90]">OS_IdleTask</a> from os_core.o(i.OS_IdleTask) referenced from os_core.o(i.OS_IdleTaskInit)
 <LI><a href="#[91]">OS_StatTask</a> from os_stat.o(i.OS_StatTask) referenced from os_stat.o(i.OS_StatTaskInit)
 <LI><a href="#[8f]">OS_TaskReturn</a> from os_task.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[92]">OS_TickTask</a> from os_tick.o(i.OS_TickTask) referenced from os_tick.o(i.OS_TickTaskInit)
 <LI><a href="#[93]">OS_TmrTask</a> from os_tmr.o(i.OS_TmrTask) referenced from os_tmr.o(i.OS_TmrInit)
 <LI><a href="#[d]">PendSV_Handler</a> from os_cpu_a.o(CODE) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[14]">RCU_CTC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[38]">RTC_Alarm_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[12]">RTC_WKUP_IRQHandler</a> from gd32f4xx_it.o(i.RTC_WKUP_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[40]">SDIO_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[32]">SPI0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[42]">SPI2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[62]">SPI3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[63]">SPI4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[64]">SPI5_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[94]">Sem_Create</a> from sys_sem.o(i.Sem_Create) referenced from sys_sem.o(i.Sem_Init)
 <LI><a href="#[95]">Sem_Delete</a> from sys_sem.o(i.Sem_Delete) referenced from sys_sem.o(i.Sem_Init)
 <LI><a href="#[f0]">Sem_Init</a> from sys_sem.o(i.Sem_Init) referenced from sys_sem.o(init.item.1)
 <LI><a href="#[96]">Sem_Pend</a> from sys_sem.o(i.Sem_Pend) referenced from sys_sem.o(i.Sem_Init)
 <LI><a href="#[97]">Sem_Post</a> from sys_sem.o(i.Sem_Post) referenced from sys_sem.o(i.Sem_Init)
 <LI><a href="#[e]">SysTick_Handler</a> from gd32f4xx_it.o(i.SysTick_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[9f]">SysTimer_DiffLocalTime</a> from sys_timer.o(i.SysTimer_DiffLocalTime) referenced from sys_timer.o(i.SysTimer_Init)
 <LI><a href="#[9e]">SysTimer_DiffRunTime</a> from sys_timer.o(i.SysTimer_DiffRunTime) referenced from sys_timer.o(i.SysTimer_Init)
 <LI><a href="#[99]">SysTimer_GetLocalTime</a> from sys_timer.o(i.SysTimer_GetLocalTime) referenced from sys_timer.o(i.SysTimer_Init)
 <LI><a href="#[9a]">SysTimer_GetRunTime</a> from sys_timer.o(i.SysTimer_GetRunTime) referenced from sys_timer.o(i.SysTimer_Init)
 <LI><a href="#[f1]">SysTimer_Init</a> from sys_timer.o(i.SysTimer_Init) referenced from sys_timer.o(init.item.1)
 <LI><a href="#[a0]">SysTimer_ResetReason</a> from sys_timer.o(i.SysTimer_ResetReason) referenced from sys_timer.o(i.SysTimer_Init)
 <LI><a href="#[98]">SysTimer_SetLocalTime</a> from sys_timer.o(i.SysTimer_SetLocalTime) referenced from sys_timer.o(i.SysTimer_Init)
 <LI><a href="#[9d]">SysTimer_Sleep</a> from sys_timer.o(i.SysTimer_Sleep) referenced from sys_timer.o(i.SysTimer_Init)
 <LI><a href="#[9b]">SysTimer_UpdateTime</a> from sys_timer.o(i.SysTimer_UpdateTime) referenced from sys_timer.o(i.SysTimer_Init)
 <LI><a href="#[9c]">SysTimer_UpdateTimeMs</a> from sys_timer.o(i.SysTimer_UpdateTimeMs) referenced from sys_timer.o(i.SysTimer_Init)
 <LI><a href="#[a1]">Sys_RecoveryBtnLongPressHandler</a> from sys_base.o(i.Sys_RecoveryBtnLongPressHandler) referenced from sys_base.o(i.Sys_RecoveryBtnInit)
 <LI><a href="#[7f]">Sys_State_Task</a> from sys_base.o(i.Sys_State_Task) referenced from main.o(i.Init_Task)
 <LI><a href="#[69]">SystemInit</a> from system_gd32f4xx.o(i.SystemInit) referenced from startup_gd32f450.o(.text)
 <LI><a href="#[11]">TAMPER_STAMP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[27]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2a]">TIMER0_CC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[29]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[28]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2b]">TIMER1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2c]">TIMER2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2d]">TIMER3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[41]">TIMER4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[45]">TIMER5_DAC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[46]">TIMER6_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3a]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3d]">TIMER7_CC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3c]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3b]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[66]">TLI_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[65]">TLI_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5e]">TRNG_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[a2]">Task_Module_Comm</a> from task_module_comm.o(i.Task_Module_Comm) referenced from task_module_comm.o(i.Task_Module_Comm_Create)
 <LI><a href="#[fd]">Task_Module_Comm_Create</a> from task_module_comm.o(i.Task_Module_Comm_Create) referenced from task_module_comm.o(task.item.1)
 <LI><a href="#[43]">UART3_IRQHandler</a> from gd32f4xx_it.o(i.UART3_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[44]">UART4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[60]">UART6_IRQHandler</a> from gd32f4xx_it.o(i.UART6_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[61]">UART7_IRQHandler</a> from gd32f4xx_it.o(i.UART7_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[34]">USART0_IRQHandler</a> from gd32f4xx_it.o(i.USART0_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[35]">USART1_IRQHandler</a> from gd32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[36]">USART2_IRQHandler</a> from gd32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[56]">USART5_IRQHandler</a> from gd32f4xx_it.o(i.USART5_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[52]">USBFS_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[39]">USBFS_WKUP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5a]">USBHS_EP1_In_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[59]">USBHS_EP1_Out_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5c]">USBHS_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5b]">USBHS_WKUP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[f5]">Upgrade_Flash_If_Init</a> from api_upgrade.o(i.Upgrade_Flash_If_Init) referenced from api_upgrade.o(init.item.3)
 <LI><a href="#[a]">UsageFault_Handler</a> from gd32f4xx_it.o(i.UsageFault_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[f]">WWDGT_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[6a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f450.o(.text)
 <LI><a href="#[a5]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[a5]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[0]">debug_process</a> from cli_cmd.o(i.debug_process) referenced 2 times from cli_cmd.o(debug_cmd.item.1)
 <LI><a href="#[a6]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[d1]">ethernet_input</a> from etharp.o(i.ethernet_input) referenced from netconf.o(i.lwip_stack_init)
 <LI><a href="#[d2]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from netconf.o(i.lwip_stack_init)
 <LI><a href="#[a4]">fputc</a> from bsp_uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[a4]">fputc</a> from bsp_uart.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[a8]">ipfrag_free_pbuf_custom</a> from ip_frag.o(i.ipfrag_free_pbuf_custom) referenced from ip_frag.o(i.ip_frag)
 <LI><a href="#[e9]">llif_can_Init</a> from llif_can.o(i.llif_can_Init) referenced from llif_can.o(inf.item.2)
 <LI><a href="#[aa]">llif_can_close</a> from llif_can.o(i.llif_can_close) referenced from llif_can.o(i.llif_can_Init)
 <LI><a href="#[ad]">llif_can_deinit</a> from llif_can.o(i.llif_can_deinit) referenced from llif_can.o(i.llif_can_Init)
 <LI><a href="#[a9]">llif_can_open</a> from llif_can.o(i.llif_can_open) referenced from llif_can.o(i.llif_can_Init)
 <LI><a href="#[ac]">llif_can_read</a> from llif_can.o(i.llif_can_read) referenced from llif_can.o(i.llif_can_Init)
 <LI><a href="#[ab]">llif_can_write</a> from llif_can.o(i.llif_can_write) referenced from llif_can.o(i.llif_can_Init)
 <LI><a href="#[eb]">llif_gpio_Init</a> from llif_gpio.o(i.llif_gpio_Init) referenced from llif_gpio.o(inf.item.2)
 <LI><a href="#[af]">llif_gpio_close</a> from llif_gpio.o(i.llif_gpio_close) referenced from llif_gpio.o(i.llif_gpio_Init)
 <LI><a href="#[b2]">llif_gpio_deinit</a> from llif_gpio.o(i.llif_gpio_deinit) referenced from llif_gpio.o(i.llif_gpio_Init)
 <LI><a href="#[ae]">llif_gpio_open</a> from llif_gpio.o(i.llif_gpio_open) referenced from llif_gpio.o(i.llif_gpio_Init)
 <LI><a href="#[b1]">llif_gpio_read</a> from llif_gpio.o(i.llif_gpio_read) referenced from llif_gpio.o(i.llif_gpio_Init)
 <LI><a href="#[b0]">llif_gpio_write</a> from llif_gpio.o(i.llif_gpio_write) referenced from llif_gpio.o(i.llif_gpio_Init)
 <LI><a href="#[ea]">llif_inter_flash_Init</a> from llif_inter_flash.o(i.llif_inter_flash_Init) referenced from llif_inter_flash.o(inf.item.2)
 <LI><a href="#[b4]">llif_inter_flash_close</a> from llif_inter_flash.o(i.llif_inter_flash_close) referenced from llif_inter_flash.o(i.llif_inter_flash_Init)
 <LI><a href="#[b7]">llif_inter_flash_deinit</a> from llif_inter_flash.o(i.llif_inter_flash_deinit) referenced from llif_inter_flash.o(i.llif_inter_flash_Init)
 <LI><a href="#[b3]">llif_inter_flash_open</a> from llif_inter_flash.o(i.llif_inter_flash_open) referenced from llif_inter_flash.o(i.llif_inter_flash_Init)
 <LI><a href="#[b6]">llif_inter_flash_read</a> from llif_inter_flash.o(i.llif_inter_flash_read) referenced from llif_inter_flash.o(i.llif_inter_flash_Init)
 <LI><a href="#[b5]">llif_inter_flash_write</a> from llif_inter_flash.o(i.llif_inter_flash_write) referenced from llif_inter_flash.o(i.llif_inter_flash_Init)
 <LI><a href="#[b9]">llif_tcpclient_close</a> from llif_tcpclient.o(i.llif_tcpclient_close) referenced from llif_tcpclient.o(i.llif_tcpclient_init)
 <LI><a href="#[bc]">llif_tcpclient_deinit</a> from llif_tcpclient.o(i.llif_tcpclient_deinit) referenced from llif_tcpclient.o(i.llif_tcpclient_init)
 <LI><a href="#[ed]">llif_tcpclient_init</a> from llif_tcpclient.o(i.llif_tcpclient_init) referenced from llif_tcpclient.o(inf.item.2)
 <LI><a href="#[b8]">llif_tcpclient_open</a> from llif_tcpclient.o(i.llif_tcpclient_open) referenced from llif_tcpclient.o(i.llif_tcpclient_init)
 <LI><a href="#[bb]">llif_tcpclient_read</a> from llif_tcpclient.o(i.llif_tcpclient_read) referenced from llif_tcpclient.o(i.llif_tcpclient_init)
 <LI><a href="#[ba]">llif_tcpclient_write</a> from llif_tcpclient.o(i.llif_tcpclient_write) referenced from llif_tcpclient.o(i.llif_tcpclient_init)
 <LI><a href="#[be]">llif_tcpserver_close</a> from llif_tcpserver.o(i.llif_tcpserver_close) referenced from llif_tcpserver.o(i.llif_tcpserver_init)
 <LI><a href="#[c1]">llif_tcpserver_deinit</a> from llif_tcpserver.o(i.llif_tcpserver_deinit) referenced from llif_tcpserver.o(i.llif_tcpserver_init)
 <LI><a href="#[e7]">llif_tcpserver_init</a> from llif_tcpserver.o(i.llif_tcpserver_init) referenced from llif_tcpserver.o(inf.item.2)
 <LI><a href="#[bd]">llif_tcpserver_open</a> from llif_tcpserver.o(i.llif_tcpserver_open) referenced from llif_tcpserver.o(i.llif_tcpserver_init)
 <LI><a href="#[c0]">llif_tcpserver_read</a> from llif_tcpserver.o(i.llif_tcpserver_read) referenced from llif_tcpserver.o(i.llif_tcpserver_init)
 <LI><a href="#[bf]">llif_tcpserver_write</a> from llif_tcpserver.o(i.llif_tcpserver_write) referenced from llif_tcpserver.o(i.llif_tcpserver_init)
 <LI><a href="#[ec]">llif_uart_Init</a> from llif_uart.o(i.llif_uart_Init) referenced from llif_uart.o(inf.item.2)
 <LI><a href="#[c3]">llif_uart_close</a> from llif_uart.o(i.llif_uart_close) referenced from llif_uart.o(i.llif_uart_Init)
 <LI><a href="#[c6]">llif_uart_deinit</a> from llif_uart.o(i.llif_uart_deinit) referenced from llif_uart.o(i.llif_uart_Init)
 <LI><a href="#[c2]">llif_uart_open</a> from llif_uart.o(i.llif_uart_open) referenced from llif_uart.o(i.llif_uart_Init)
 <LI><a href="#[c5]">llif_uart_read</a> from llif_uart.o(i.llif_uart_read) referenced from llif_uart.o(i.llif_uart_Init)
 <LI><a href="#[c4]">llif_uart_write</a> from llif_uart.o(i.llif_uart_write) referenced from llif_uart.o(i.llif_uart_Init)
 <LI><a href="#[c8]">llif_udp_close</a> from llif_udp.o(i.llif_udp_close) referenced from llif_udp.o(i.llif_udp_init)
 <LI><a href="#[cb]">llif_udp_deinit</a> from llif_udp.o(i.llif_udp_deinit) referenced from llif_udp.o(i.llif_udp_init)
 <LI><a href="#[ee]">llif_udp_init</a> from llif_udp.o(i.llif_udp_init) referenced from llif_udp.o(inf.item.2)
 <LI><a href="#[c7]">llif_udp_open</a> from llif_udp.o(i.llif_udp_open) referenced from llif_udp.o(i.llif_udp_init)
 <LI><a href="#[ca]">llif_udp_read</a> from llif_udp.o(i.llif_udp_read) referenced from llif_udp.o(i.llif_udp_init)
 <LI><a href="#[c9]">llif_udp_write</a> from llif_udp.o(i.llif_udp_write) referenced from llif_udp.o(i.llif_udp_init)
 <LI><a href="#[cd]">llif_udpgroup_close</a> from llif_udpgroup.o(i.llif_udpgroup_close) referenced from llif_udpgroup.o(i.llif_udpgroup_init)
 <LI><a href="#[d0]">llif_udpgroup_deinit</a> from llif_udpgroup.o(i.llif_udpgroup_deinit) referenced from llif_udpgroup.o(i.llif_udpgroup_init)
 <LI><a href="#[e8]">llif_udpgroup_init</a> from llif_udpgroup.o(i.llif_udpgroup_init) referenced from llif_udpgroup.o(inf.item.2)
 <LI><a href="#[cc]">llif_udpgroup_open</a> from llif_udpgroup.o(i.llif_udpgroup_open) referenced from llif_udpgroup.o(i.llif_udpgroup_init)
 <LI><a href="#[cf]">llif_udpgroup_read</a> from llif_udpgroup.o(i.llif_udpgroup_read) referenced from llif_udpgroup.o(i.llif_udpgroup_init)
 <LI><a href="#[ce]">llif_udpgroup_write</a> from llif_udpgroup.o(i.llif_udpgroup_write) referenced from llif_udpgroup.o(i.llif_udpgroup_init)
 <LI><a href="#[a7]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[68]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2]">man</a> from cli_cmd.o(i.man) referenced 2 times from cli_cmd.o(debug_cmd.item.1)
 <LI><a href="#[1]">reboot</a> from cli_cmd.o(i.reboot) referenced 2 times from cli_cmd.o(debug_cmd.item.1)
 <LI><a href="#[4]">runtime</a> from cli_cmd.o(i.runtime) referenced 2 times from cli_cmd.o(debug_cmd.item.1)
 <LI><a href="#[3]">set</a> from cli_cmd.o(i.set) referenced 2 times from cli_cmd.o(debug_cmd.item.1)
 <LI><a href="#[f9]">sys_debug_uart_data_handle</a> from console_uart.o(i.sys_debug_uart_data_handle) referenced from console_uart.o(period.item.4)
 <LI><a href="#[f4]">sys_debug_uart_init</a> from console_uart.o(i.sys_debug_uart_init) referenced from console_uart.o(init.item.3)
 <LI><a href="#[d5]">tcp_accept_null</a> from tcp.o(i.tcp_accept_null) referenced from tcp.o(i.tcp_listen_with_backlog)
 <LI><a href="#[db]">tcp_client_connect</a> from tcpclient.o(i.tcp_client_connect) referenced from tcpclient.o(i.tcpclient_init)
 <LI><a href="#[db]">tcp_client_connect</a> from tcpclient.o(i.tcp_client_connect) referenced from tcpclient.o(i.tcpclient_reinit)
 <LI><a href="#[d4]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[d7]">tcpclient_conn_err</a> from tcpclient.o(i.tcpclient_conn_err) referenced from tcpclient.o(i.tcpclient_init)
 <LI><a href="#[d7]">tcpclient_conn_err</a> from tcpclient.o(i.tcpclient_conn_err) referenced from tcpclient.o(i.tcpclient_reinit)
 <LI><a href="#[fc]">tcpclient_period</a> from tcpclient.o(i.tcpclient_period) referenced from tcpclient.o(period.item.4)
 <LI><a href="#[d9]">tcpclient_poll</a> from tcpclient.o(i.tcpclient_poll) referenced from tcpclient.o(i.tcpclient_init)
 <LI><a href="#[d9]">tcpclient_poll</a> from tcpclient.o(i.tcpclient_poll) referenced from tcpclient.o(i.tcpclient_reinit)
 <LI><a href="#[d8]">tcpclient_recv</a> from tcpclient.o(i.tcpclient_recv) referenced from tcpclient.o(i.tcpclient_init)
 <LI><a href="#[d8]">tcpclient_recv</a> from tcpclient.o(i.tcpclient_recv) referenced from tcpclient.o(i.tcpclient_reinit)
 <LI><a href="#[da]">tcpclient_sent</a> from tcpclient.o(i.tcpclient_sent) referenced from tcpclient.o(i.tcpclient_init)
 <LI><a href="#[da]">tcpclient_sent</a> from tcpclient.o(i.tcpclient_sent) referenced from tcpclient.o(i.tcpclient_reinit)
 <LI><a href="#[d6]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcp_timer_needed)
 <LI><a href="#[d6]">tcpip_tcp_timer</a> from timers.o(i.tcpip_tcp_timer) referenced from timers.o(i.tcpip_tcp_timer)
 <LI><a href="#[e0]">tcpserver_accept</a> from tcpserver.o(i.tcpserver_accept) referenced from tcpserver.o(i.tcpserver_init)
 <LI><a href="#[dd]">tcpserver_conn_err</a> from tcpserver.o(i.tcpserver_conn_err) referenced from tcpserver.o(i.tcpserver_accept)
 <LI><a href="#[de]">tcpserver_poll</a> from tcpserver.o(i.tcpserver_poll) referenced from tcpserver.o(i.tcpserver_accept)
 <LI><a href="#[dc]">tcpserver_recv</a> from tcpserver.o(RAMCODE) referenced from tcpserver.o(i.tcpserver_accept)
 <LI><a href="#[df]">tcpserver_sent</a> from tcpserver.o(i.tcpserver_sent) referenced from tcpserver.o(i.tcpserver_accept)
 <LI><a href="#[a3]">telnet_accept</a> from telnet.o(i.telnet_accept) referenced from telnet.o(i.Telnet_Init)
 <LI><a href="#[e3]">telnet_conn_err</a> from telnet.o(i.telnet_conn_err) referenced from telnet.o(i.telnet_accept)
 <LI><a href="#[e4]">telnet_poll</a> from telnet.o(i.telnet_poll) referenced from telnet.o(i.telnet_accept)
 <LI><a href="#[e1]">telnet_recv</a> from telnet.o(i.telnet_recv) referenced from telnet.o(i.telnet_accept)
 <LI><a href="#[e2]">telnet_sent</a> from telnet.o(i.telnet_sent) referenced from telnet.o(i.telnet_accept)
 <LI><a href="#[e5]">udp_group_recv</a> from udpgroup.o(RAMCODE) referenced from udpgroup.o(i.udp_group_init)
 <LI><a href="#[e6]">udp_ip_search_recv</a> from udp_ip_search.o(i.udp_ip_search_recv) referenced from udp_ip_search.o(i.udp_ip_search_init)
 <LI><a href="#[fa]">udp_send_period</a> from udpgroup.o(i.udp_send_period) referenced from udpgroup.o(period.item.4)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(.text)
</UL>
<P><STRONG><a name="[338]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[fe]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[117]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[339]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[33a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[33b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[33c]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[33d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[33e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA0_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER0_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIMER7_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TLI_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TLI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USBHS_EP1_In_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USBHS_EP1_Out_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>USBHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>USBHS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[33f]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cri_EnterCritical
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasInit
</UL>

<P><STRONG><a name="[177]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cri_ExitCritical
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasInit
</UL>

<P><STRONG><a name="[341]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>

<P><STRONG><a name="[343]"></a>CPU_CntTrailZeros</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>CPU_RevBits</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[104]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Get
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Telnet_Cmd
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Telnet_Prev_Cmd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Telnet_Next_Cmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Sys_Param_Save
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Sys_Param_Recovery_Default
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_recv
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Debug_Uart_Cmd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Debug_Uart_Prev_Cmd
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Debug_Uart_Next_Cmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_can_read
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Push
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Pop
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX1_IRQHandler (via Veneer)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX0_IRQHandler (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN0_Send
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_ip_search_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
</UL>

<P><STRONG><a name="[345]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[346]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_accept
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Telnet_Cmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Sys_Param_Recovery_Default
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_debug_uart_data_handle
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_recv
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Debug_Uart_Cmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_parse_info
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_cmd_process
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mutex_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpo_Ctl_DeInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpio_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpi_Btn_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpi_Btn_DeInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_debug_uart_data_handle
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_cmd_process
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_recv
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_inter_flash_read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_inter_flash_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_can_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udpgroup_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpserver_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udp_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpclient_init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
</UL>

<P><STRONG><a name="[348]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2ec]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
</UL>

<P><STRONG><a name="[299]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
</UL>

<P><STRONG><a name="[1a5]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_cmd_process
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Telnet_Cmd
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Telnet_Prev_Cmd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Telnet_Next_Cmd
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_cmd_process
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_recv
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Debug_Uart_Cmd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Debug_Uart_Prev_Cmd
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Debug_Uart_Next_Cmd
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process
</UL>

<P><STRONG><a name="[25e]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_recv
</UL>

<P><STRONG><a name="[1af]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Telnet_Cmd
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_recv
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Debug_Uart_Cmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[25a]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTaskInfo
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTaskInfo
</UL>

<P><STRONG><a name="[197]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTaskInfo
</UL>

<P><STRONG><a name="[349]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[34a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[34b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer_SetLocalTime
</UL>

<P><STRONG><a name="[105]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[34c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[10c]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[24d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ff]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[34d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[34e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[110]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[34f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStartHighRdy &rArr; OSTaskSwHook &rArr; CPU_IntDisMeasMaxCurReset &rArr; CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[1dd]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[1d0]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; OSTaskSwHook &rArr; CPU_IntDisMeasMaxCurReset &rArr; CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>Api_Gpi_Btn_Attach</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, api_gpio.o(i.Api_Gpi_Btn_Attach))
<BR>[Address Reference Count : 1]<UL><LI> api_gpio.o(i.Api_Gpio_Init)
</UL>
<P><STRONG><a name="[72]"></a>Api_Gpi_Btn_DeInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, api_gpio.o(i.Api_Gpi_Btn_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Api_Gpi_Btn_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_gpio.o(i.Api_Gpio_Init)
</UL>
<P><STRONG><a name="[74]"></a>Api_Gpi_Btn_Event</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_gpio.o(i.Api_Gpi_Btn_Event))
<BR>[Address Reference Count : 1]<UL><LI> api_gpio.o(i.Api_Gpio_Init)
</UL>
<P><STRONG><a name="[71]"></a>Api_Gpi_Btn_Init</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, api_gpio.o(i.Api_Gpi_Btn_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Api_Gpi_Btn_Init &rArr; Api_Gpio_Read &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpio_Read
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_gpio.o(i.Api_Gpio_Init)
</UL>
<P><STRONG><a name="[11c]"></a>Api_Gpi_Btn_Period</STRONG> (Thumb, 638 bytes, Stack size 24 bytes, api_gpio.o(i.Api_Gpi_Btn_Period))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Api_Gpi_Btn_Period &rArr; Api_Gpio_Read &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpio_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpio_Ctl_Period
</UL>

<P><STRONG><a name="[75]"></a>Api_Gpio_Ctl_Period</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, api_gpio.o(i.Api_Gpio_Ctl_Period))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Api_Gpio_Ctl_Period &rArr; Api_Gpi_Btn_Period &rArr; Api_Gpio_Read &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpo_Period
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpi_Btn_Period
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_gpio.o(i.Api_Gpio_Init)
</UL>
<P><STRONG><a name="[f8]"></a>Api_Gpio_Init</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, api_gpio.o(i.Api_Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Api_Gpio_Init &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_gpio.o(init.item.4)
</UL>
<P><STRONG><a name="[6b]"></a>Api_Gpio_Read</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, api_gpio.o(i.Api_Gpio_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Api_Gpio_Read &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpi_Btn_Period
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpi_Btn_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_gpio.o(i.Api_Gpio_Init)
</UL>
<P><STRONG><a name="[6d]"></a>Api_Gpio_Toggle</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, api_gpio.o(i.Api_Gpio_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Api_Gpio_Toggle &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpo_Ctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_gpio.o(i.Api_Gpio_Init)
</UL>
<P><STRONG><a name="[6c]"></a>Api_Gpio_Write</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, api_gpio.o(i.Api_Gpio_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Api_Gpio_Write &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpo_Period
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpo_Ctl_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpo_Ctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_gpio.o(i.Api_Gpio_Init)
</UL>
<P><STRONG><a name="[70]"></a>Api_Gpo_Ctl</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, api_gpio.o(i.Api_Gpo_Ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Api_Gpo_Ctl &rArr; Api_Gpio_Write &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpio_Write
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpio_Toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_gpio.o(i.Api_Gpio_Init)
</UL>
<P><STRONG><a name="[6f]"></a>Api_Gpo_Ctl_DeInit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, api_gpio.o(i.Api_Gpo_Ctl_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Api_Gpo_Ctl_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_gpio.o(i.Api_Gpio_Init)
</UL>
<P><STRONG><a name="[6e]"></a>Api_Gpo_Ctl_Init</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, api_gpio.o(i.Api_Gpo_Ctl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Api_Gpo_Ctl_Init &rArr; Api_Gpio_Write &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpio_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_gpio.o(i.Api_Gpio_Init)
</UL>
<P><STRONG><a name="[11d]"></a>Api_Gpo_Period</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, api_gpio.o(i.Api_Gpo_Period))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Api_Gpo_Period &rArr; Api_Gpio_Write &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpio_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpio_Ctl_Period
</UL>

<P><STRONG><a name="[76]"></a>Api_Sys_Param_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, api_sys_param.o(i.Api_Sys_Param_Get))
<BR>[Address Reference Count : 1]<UL><LI> api_sys_param.o(i.Api_Sys_Param_Init)
</UL>
<P><STRONG><a name="[f7]"></a>Api_Sys_Param_Init</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, api_sys_param.o(i.Api_Sys_Param_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Api_Sys_Param_Init &rArr; Api_Sys_Param_Recovery &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Sys_Param_Recovery
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_sys_param.o(init.item.4)
</UL>
<P><STRONG><a name="[79]"></a>Api_Sys_Param_Recovery</STRONG> (Thumb, 352 bytes, Stack size 88 bytes, api_sys_param.o(i.Api_Sys_Param_Recovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Api_Sys_Param_Recovery &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Sys_Param_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_sys_param.o(i.Api_Sys_Param_Init)
</UL>
<P><STRONG><a name="[7a]"></a>Api_Sys_Param_Recovery_Default</STRONG> (Thumb, 630 bytes, Stack size 48 bytes, api_sys_param.o(i.Api_Sys_Param_Recovery_Default))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Api_Sys_Param_Recovery_Default &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_sys_param.o(i.Api_Sys_Param_Init)
</UL>
<P><STRONG><a name="[78]"></a>Api_Sys_Param_Save</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, api_sys_param.o(i.Api_Sys_Param_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Api_Sys_Param_Save &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc16
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_sys_param.o(i.Api_Sys_Param_Init)
</UL>
<P><STRONG><a name="[77]"></a>Api_Sys_Param_Shadow_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, api_sys_param.o(i.Api_Sys_Param_Shadow_Get))
<BR>[Address Reference Count : 1]<UL><LI> api_sys_param.o(i.Api_Sys_Param_Init)
</UL>
<P><STRONG><a name="[120]"></a>BSP_CAN0_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_can.o(i.BSP_CAN0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_CAN0_Init &rArr; can0_config &rArr; can_filter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSimpleBuff_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can0_gpio_config
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can0_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_can_open
</UL>

<P><STRONG><a name="[124]"></a>BSP_CAN0_Send</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, bsp_can.o(i.BSP_CAN0_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BSP_CAN0_Send &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_states
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmission_stop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_transmit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN0_SendBuff
</UL>

<P><STRONG><a name="[128]"></a>BSP_CAN0_SendBuff</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, bsp_can.o(i.BSP_CAN0_SendBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BSP_CAN0_SendBuff &rArr; BSP_CAN0_Send &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN0_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_can_write
</UL>

<P><STRONG><a name="[129]"></a>BSP_CPU_ClkFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.BSP_CPU_ClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BSP_CPU_ClkFreq &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>

<P><STRONG><a name="[12b]"></a>BSP_GPI_Poll_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_gpio.o(i.BSP_GPI_Poll_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_GPI_Poll_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_gpio_Init
</UL>

<P><STRONG><a name="[12e]"></a>BSP_GPI_State_Get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_GPI_State_Get))
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_gpio_read
</UL>

<P><STRONG><a name="[132]"></a>BSP_GPO_High</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_GPO_High))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Task
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_gpio_write
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enet_Phy_Reset
</UL>

<P><STRONG><a name="[130]"></a>BSP_GPO_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_gpio.o(i.BSP_GPO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_GPO_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPO_Low
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPO_High
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_gpio_Init
</UL>

<P><STRONG><a name="[133]"></a>BSP_GPO_Low</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_GPO_Low))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Task
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPO_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_gpio_write
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enet_Phy_Reset
</UL>

<P><STRONG><a name="[2c9]"></a>BSP_GPO_Toggle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_GPO_Toggle))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_gpio_write
</UL>

<P><STRONG><a name="[21e]"></a>BSP_RTC_GetResetReason</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_rtc.o(i.BSP_RTC_GetResetReason))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer_ResetReason
</UL>

<P><STRONG><a name="[134]"></a>BSP_RTC_Init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, bsp_rtc.o(i.BSP_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_RTC_Init &rArr; BSP_Rtc_Time_Get &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Get
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wakeup_timer_set
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wakeup_enable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wakeup_clock_set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_enable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_all_reset_flag_clear
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_backup_write_enable
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Setup
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Pre_Config
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer_Init
</UL>

<P><STRONG><a name="[142]"></a>BSP_Rtc_Time_Get</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, bsp_rtc.o(i.BSP_Rtc_Time_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_Rtc_Time_Get &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_current_time_get
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer_UpdateTime
</UL>

<P><STRONG><a name="[145]"></a>BSP_Rtc_Time_Set</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, bsp_rtc.o(i.BSP_Rtc_Time_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_Rtc_Time_Set &rArr; rtc_init &rArr; rtc_register_sync_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wakeup_timer_set
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wakeup_enable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wakeup_disable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wakeup_clock_set
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_enable
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_interrupt_disable
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_disable
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer_SetLocalTime
</UL>

<P><STRONG><a name="[14b]"></a>BSP_USARTx_DMA_Init</STRONG> (Thumb, 548 bytes, Stack size 96 bytes, bsp_uart.o(i.BSP_USARTx_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = BSP_USARTx_DMA_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmit_config
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_receive_config
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_single_data_mode_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_enable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_subperipheral_select
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_uart_open
</UL>

<P><STRONG><a name="[160]"></a>BSP_USARTx_DMA_Receive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, bsp_uart.o(i.BSP_USARTx_DMA_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_USARTx_DMA_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_receive_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_get
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>BSP_USARTx_DMA_Restart</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, bsp_uart.o(i.BSP_USARTx_DMA_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_USARTx_DMA_Restart &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_receive_config
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Get_Char
</UL>

<P><STRONG><a name="[169]"></a>BSP_USARTx_DMA_Send</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, bsp_uart.o(i.BSP_USARTx_DMA_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BSP_USARTx_DMA_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Send_Buff
</UL>

<P><STRONG><a name="[165]"></a>BSP_USARTx_DMA_SendSucc</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bsp_uart.o(i.BSP_USARTx_DMA_SendSucc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_USARTx_DMA_SendSucc
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmit_config
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel4_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel0_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>BSP_USARTx_DMA_WriteBak</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_uart.o(i.BSP_USARTx_DMA_WriteBak))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel6_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel5_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[166]"></a>BSP_USARTx_Get_Char</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bsp_uart.o(i.BSP_USARTx_Get_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_USARTx_Get_Char &rArr; BSP_USARTx_DMA_Restart &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_uart_read
</UL>

<P><STRONG><a name="[167]"></a>BSP_USARTx_Send_Buff</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, bsp_uart.o(i.BSP_USARTx_Send_Buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BSP_USARTx_Send_Buff &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Send_Buff_Poll
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_uart_write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[168]"></a>BSP_USARTx_Send_Buff_Poll</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, bsp_uart.o(i.BSP_USARTx_Send_Buff_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_USARTx_Send_Buff_Poll &rArr; BSP_USARTx_Send_Char
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Send_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Send_Buff
</UL>

<P><STRONG><a name="[16a]"></a>BSP_USARTx_Send_Char</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_uart.o(i.BSP_USARTx_Send_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_USARTx_Send_Char
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Send_Buff_Poll
</UL>

<P><STRONG><a name="[16d]"></a>BSP_USARTx_Tx_DMA_Start</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp_uart.o(i.BSP_USARTx_Tx_DMA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_USARTx_Tx_DMA_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmit_config
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugCom_DmaSendPeriodTask
</UL>

<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BusFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[170]"></a>CPU_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = CPU_Init &rArr; CPU_TS_Init &rArr; CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[178]"></a>CPU_IntDisMeasMaxCurGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_IntDisMeasMaxCurGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
</UL>

<P><STRONG><a name="[17a]"></a>CPU_IntDisMeasMaxCurReset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_IntDisMeasMaxCurReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = CPU_IntDisMeasMaxCurReset &rArr; CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[17b]"></a>CPU_IntDisMeasMaxGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_IntDisMeasMaxGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = CPU_IntDisMeasMaxGet
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[175]"></a>CPU_IntDisMeasStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_IntDisMeasStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_IntDisMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasInit
</UL>

<P><STRONG><a name="[176]"></a>CPU_IntDisMeasStop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_IntDisMeasStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasInit
</UL>

<P><STRONG><a name="[17d]"></a>CPU_NameClr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_NameClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = CPU_NameClr &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Clr
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameInit
</UL>

<P><STRONG><a name="[180]"></a>CPU_TS_TmrFreqSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu_core.o(i.CPU_TS_TmrFreqSet))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>

<P><STRONG><a name="[17f]"></a>CPU_TS_TmrInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp.o(i.CPU_TS_TmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrFreqSet
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
</UL>

<P><STRONG><a name="[17c]"></a>CPU_TS_TmrRd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.CPU_TS_TmrRd))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[181]"></a>CanSimpleBuff_GetFreeSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canbuff.o(i.CanSimpleBuff_GetFreeSize))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_GetFreeSize
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX1_IRQHandler (via Veneer)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX0_IRQHandler (via Veneer)
</UL>

<P><STRONG><a name="[121]"></a>CanSimpleBuff_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, canbuff.o(i.CanSimpleBuff_Init))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN0_Init
</UL>

<P><STRONG><a name="[184]"></a>CanSimpleBuff_Pop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, canbuff.o(i.CanSimpleBuff_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanSimpleBuff_Pop &rArr; Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_can_read
</UL>

<P><STRONG><a name="[186]"></a>CanSimpleBuff_Push</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, canbuff.o(i.CanSimpleBuff_Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CanSimpleBuff_Push &rArr; Ringbuff_Push &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Push
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX1_IRQHandler (via Veneer)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX0_IRQHandler (via Veneer)
</UL>

<P><STRONG><a name="[7d]"></a>Cri_EnterCritical</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_critical.o(i.Cri_EnterCritical))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_critical.o(i.Critical_Init)
</UL>
<P><STRONG><a name="[7e]"></a>Cri_ExitCritical</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_critical.o(i.Cri_ExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Cri_ExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_critical.o(i.Critical_Init)
</UL>
<P><STRONG><a name="[7b]"></a>Cri_SchedLock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_critical.o(i.Cri_SchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Cri_SchedLock &rArr; OSSchedLock &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_critical.o(i.Critical_Init)
</UL>
<P><STRONG><a name="[7c]"></a>Cri_SchedUnlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_critical.o(i.Cri_SchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Cri_SchedUnlock &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_critical.o(i.Critical_Init)
</UL>
<P><STRONG><a name="[f2]"></a>Critical_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys_critical.o(i.Critical_Init))
<BR>[Address Reference Count : 1]<UL><LI> sys_critical.o(init.item.1)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA0_Channel0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA0_Channel0_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_SendSucc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA0_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA0_Channel1_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_WriteBak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA0_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA0_Channel2_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_WriteBak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA0_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA0_Channel3_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_WriteBak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA0_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA0_Channel4_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_SendSucc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA0_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA0_Channel5_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_WriteBak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA0_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA0_Channel6_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_WriteBak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_WriteBak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_clear
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_WriteBak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Channel6_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_SendSucc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; dma_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_interrupt_flag_get
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_SendSucc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>DbgLog</STRONG> (Thumb, 880 bytes, Stack size 112 bytes, dbg_log.o(i.DbgLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_conn_err
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_poll
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_accept
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Module_Comm_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Module_Comm_Create
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Task
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_Create
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_RecoveryBtnLongPressHandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTaskInfo
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upgrade_Flash_If_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpo_Ctl_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpo_Ctl
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpio_Write
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpio_Toggle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpio_Read
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpio_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpi_Btn_Period
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Gpi_Btn_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Sys_Param_Save
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Sys_Param_Recovery_Default
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Sys_Param_Recovery
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Sys_Param_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_debug_uart_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_recv
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_gpio_open
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_gpio_deinit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_gpio_close
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_gpio_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_inter_flash_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_inter_flash_read
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_inter_flash_open
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_inter_flash_deinit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_inter_flash_close
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_inter_flash_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN0_SendBuff
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_can_write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_can_open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_can_deinit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_can_close
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_can_Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_send_data_to_rb
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_send_data (via Veneer)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udpgroup_write
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udpgroup_open
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udpgroup_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udpgroup_deinit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udpgroup_close
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_send_data
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpserver_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpserver_open
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpserver_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpserver_deinit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpserver_close
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_Open
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_Deinit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_Close
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Push
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_TaskMonitor
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Exit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Enter
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_Create
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send_period
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_send_data_by_pbuf (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_recv (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_conn_err
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_sent
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_poll
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_accept
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_recv (via Veneer)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_ip_search_send_data
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udp_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udp_open
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udp_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udp_deinit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udp_close
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_send_data
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpclient_write
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpclient_open
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpclient_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpclient_deinit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpclient_close
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Send_Buff
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_uart_write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_uart_open
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_uart_deinit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_uart_close
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_uart_Init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_reinit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_conn_err
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_connect
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_sent
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_recv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_poll
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN0_Send
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_ip_search_recv
</UL>

<P><STRONG><a name="[1b9]"></a>DbgLogGetLeftMsgLen</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dbg_log.o(i.DbgLogGetLeftMsgLen))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Periodic_Task
</UL>

<P><STRONG><a name="[18f]"></a>DbgLogSendPeriodHandler</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, dbg_log.o(i.DbgLogSendPeriodHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = DbgLogSendPeriodHandler &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Periodic_Task
</UL>

<P><STRONG><a name="[fb]"></a>DebugCom_DmaSendPeriodTask</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bsp_uart.o(i.DebugCom_DmaSendPeriodTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DebugCom_DmaSendPeriodTask &rArr; BSP_USARTx_Tx_DMA_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Tx_DMA_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(period.item.4)
</UL>
<P><STRONG><a name="[195]"></a>Debug_Uart_Display_Cmd_Prompt</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, console_uart.o(i.Debug_Uart_Display_Cmd_Prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Debug_Uart_Display_Cmd_Prompt &rArr; debug_uart_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_data_send
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_recv
</UL>

<P><STRONG><a name="[196]"></a>DispTaskInfo</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, sys_base.o(i.DispTaskInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DispTaskInfo &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Task
</UL>

<P><STRONG><a name="[37]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.EXTI10_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI10_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>Enet_DelayMs</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bsp_enet.o(i.Enet_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Enet_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enet_Phy_Reset
</UL>

<P><STRONG><a name="[19a]"></a>Enet_Phy_Reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_enet.o(i.Enet_Phy_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Enet_Phy_Reset &rArr; Enet_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPO_Low
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPO_High
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enet_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_system_setup
</UL>

<P><STRONG><a name="[19c]"></a>FLASH_If_Erase</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_flash_if.o(i.FLASH_If_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_If_Erase &rArr; fmc_sector_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_sector_erase
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSectorMapIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_inter_flash_write
</UL>

<P><STRONG><a name="[2ca]"></a>FLASH_If_Read</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, bsp_flash_if.o(i.FLASH_If_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_If_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_inter_flash_read
</UL>

<P><STRONG><a name="[1a2]"></a>FLASH_If_Write</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bsp_flash_if.o(i.FLASH_If_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_If_Write &rArr; fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_inter_flash_write
</UL>

<P><STRONG><a name="[11e]"></a>GetCrc16</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, common.o(i.GetCrc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Sys_Param_Save
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Sys_Param_Recovery
</UL>

<P><STRONG><a name="[d3]"></a>Init_Task</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, main.o(i.Init_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Init_Task &rArr; ping_proc &rArr; ping_proc_end &rArr; Telnet_Display_Cmd_Prompt &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[82]"></a>Interface_Close</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, interface.o(i.Interface_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Interface_Close &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(i.Interface_Init)
</UL>
<P><STRONG><a name="[85]"></a>Interface_Deinit</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, interface.o(i.Interface_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Interface_Deinit &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(i.Interface_Init)
</UL>
<P><STRONG><a name="[f3]"></a>Interface_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, interface.o(i.Interface_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Interface_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(init.item.2)
</UL>
<P><STRONG><a name="[81]"></a>Interface_Open</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, interface.o(i.Interface_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Interface_Open &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(i.Interface_Init)
</UL>
<P><STRONG><a name="[84]"></a>Interface_Read</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, interface.o(i.Interface_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Interface_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(i.Interface_Init)
</UL>
<P><STRONG><a name="[83]"></a>Interface_Write</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, interface.o(i.Interface_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Interface_Write &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(i.Interface_Init)
</UL>
<P><STRONG><a name="[1b1]"></a>Lwip_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_base.o(i.Lwip_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = Lwip_Init &rArr; lwip_stack_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_stack_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_system_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Periodic_Task
</UL>

<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[17e]"></a>Mem_Clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_mem.o(i.Mem_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>

<P><STRONG><a name="[351]"></a>Mem_Set</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lib_mem.o(i.Mem_Set), UNUSED)

<P><STRONG><a name="[1a9]"></a>Module_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sys_module.o(i.Module_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Module_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[226]"></a>Module_Sem_Pend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, task_module_comm.o(i.Module_Sem_Pend))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Module_Comm
</UL>

<P><STRONG><a name="[238]"></a>Module_Sem_Post</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, task_module_comm.o(i.Module_Sem_Post))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>Monitor_Create</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, sys_monitor.o(i.Monitor_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Monitor_Create &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_monitor.o(i.Monitor_Init)
</UL>
<P><STRONG><a name="[87]"></a>Monitor_Delete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sys_monitor.o(i.Monitor_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Monitor_Delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_monitor.o(i.Monitor_Init)
</UL>
<P><STRONG><a name="[88]"></a>Monitor_Enter</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sys_monitor.o(i.Monitor_Enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Monitor_Enter &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_monitor.o(i.Monitor_Init)
</UL>
<P><STRONG><a name="[89]"></a>Monitor_Exit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sys_monitor.o(i.Monitor_Exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Monitor_Exit &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_monitor.o(i.Monitor_Init)
</UL>
<P><STRONG><a name="[f6]"></a>Monitor_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sys_monitor.o(i.Monitor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Monitor_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_monitor.o(init.item.3)
</UL>
<P><STRONG><a name="[8a]"></a>Monitor_TaskMonitor</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, sys_monitor.o(i.Monitor_TaskMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Monitor_TaskMonitor &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_monitor.o(i.Monitor_Init)
</UL>
<P><STRONG><a name="[8b]"></a>Mutex_Create</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sys_mutex.o(i.Mutex_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Mutex_Create &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_mutex.o(i.Mutex_Init)
</UL>
<P><STRONG><a name="[8c]"></a>Mutex_Delete</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sys_mutex.o(i.Mutex_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Mutex_Delete &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_mutex.o(i.Mutex_Init)
</UL>
<P><STRONG><a name="[ef]"></a>Mutex_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sys_mutex.o(i.Mutex_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mutex_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_mutex.o(init.item.1)
</UL>
<P><STRONG><a name="[8d]"></a>Mutex_Lock</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sys_mutex.o(i.Mutex_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = Mutex_Lock &rArr; OSMutexPend &rArr; OS_TaskChangePrio &rArr; OS_PendListChangePrio &rArr; OS_PendListInsertPrio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_mutex.o(i.Mutex_Init)
</UL>
<P><STRONG><a name="[8e]"></a>Mutex_Unlock</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sys_mutex.o(i.Mutex_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Mutex_Unlock &rArr; OSMutexPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_mutex.o(i.Mutex_Init)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>Net_Periodic_Task</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sys_base.o(i.Net_Periodic_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = Net_Periodic_Task &rArr; Lwip_Init &rArr; lwip_stack_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Handle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLogSendPeriodHandler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLogGetLeftMsgLen
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lwip_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Init_Task)
</UL>
<P><STRONG><a name="[1b8]"></a>Network_Handle</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, netconf.o(i.Network_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = Network_Handle &rArr; lwip_periodic_handle &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_rxframe_size_get
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_pkt_handle
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_periodic_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Periodic_Task
</UL>

<P><STRONG><a name="[1cd]"></a>OSCfg_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cfg_app.o(i.OSCfg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[202]"></a>OSIdleTaskHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSIdleTaskHook))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
</UL>

<P><STRONG><a name="[1bd]"></a>OSInit</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemInit
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgPoolInit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dbg_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHook
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCfg_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1be]"></a>OSInitHook</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[21d]"></a>OSIntEnter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1ce]"></a>OSIntExit</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSIntExit &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1b4]"></a>OSMutexCreate</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, os_mutex.o(i.OSMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSMutexCreate &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexDbgListAdd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mutex_Create
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
</UL>

<P><STRONG><a name="[1b5]"></a>OSMutexPend</STRONG> (Thumb, 356 bytes, Stack size 72 bytes, os_mutex.o(i.OSMutexPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = OSMutexPend &rArr; OS_TaskChangePrio &rArr; OS_PendListChangePrio &rArr; OS_PendListInsertPrio
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpAdd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mutex_Lock
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLock
</UL>

<P><STRONG><a name="[1b6]"></a>OSMutexPost</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, os_mutex.o(i.OSMutexPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSMutexPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpRemove
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpAdd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mutex_Unlock
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlock
</UL>

<P><STRONG><a name="[1d6]"></a>OSSched</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, os_core.o(i.OSSched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
</UL>

<P><STRONG><a name="[188]"></a>OSSchedLock</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSchedLock &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_Delete
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_Create
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mutex_Delete
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mutex_Create
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cri_SchedLock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer_SetLocalTime
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[189]"></a>OSSchedUnlock</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_Delete
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_Create
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mutex_Delete
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mutex_Create
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cri_SchedUnlock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer_SetLocalTime
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[1de]"></a>OSSemCreate</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemCreate &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemDbgListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_Create
</UL>

<P><STRONG><a name="[1e0]"></a>OSSemDel</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, os_sem.o(i.OSSemDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSSemDel &rArr; OS_PendObjDel &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemDbgListRemove
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_Delete
</UL>

<P><STRONG><a name="[1e4]"></a>OSSemPend</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_Pend
</UL>

<P><STRONG><a name="[1e5]"></a>OSSemPost</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_Post
</UL>

<P><STRONG><a name="[1e7]"></a>OSStart</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSStart &rArr; OSStartHighRdy &rArr; OSTaskSwHook &rArr; CPU_IntDisMeasMaxCurReset &rArr; CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e8]"></a>OSStatReset</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, os_stat.o(i.OSStatReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatReset &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[1aa]"></a>OSStatTaskCPUUsageInit</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, os_stat.o(i.OSStatTaskCPUUsageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OSStatTaskCPUUsageInit &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[210]"></a>OSStatTaskHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSStatTaskHook))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[1ab]"></a>OSTaskCreate</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Module_Comm_Create
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTaskInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
</UL>

<P><STRONG><a name="[1ef]"></a>OSTaskCreateHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[1f1]"></a>OSTaskDel</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, os_task.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_MutexGrpPostAll &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQFreeAll
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[1f6]"></a>OSTaskDelHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1eb]"></a>OSTaskResume</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_task.o(i.OSTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTaskResume &rArr; OS_TaskResume &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[212]"></a>OSTaskReturnHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskReturnHook))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[1f9]"></a>OSTaskSemPend</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, os_task.o(i.OSTaskSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[1fa]"></a>OSTaskSemPost</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, os_task.o(i.OSTaskSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[1fc]"></a>OSTaskStkChk</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[1ed]"></a>OSTaskStkInit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[1e9]"></a>OSTaskSuspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_TaskSuspend &rArr; OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
</UL>

<P><STRONG><a name="[119]"></a>OSTaskSwHook</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSwHook &rArr; CPU_IntDisMeasMaxCurReset &rArr; CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1ea]"></a>OSTimeDly</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[1ff]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer_Sleep
</UL>

<P><STRONG><a name="[200]"></a>OSTimeTick</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, os_time.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[201]"></a>OSTimeTickHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[1cc]"></a>OS_Dbg_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_dbg.o(i.OS_Dbg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c1]"></a>OS_FlagInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[90]"></a>OS_IdleTask</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_core.o(i.OS_IdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_IdleTask &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIdleTaskHook
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_IdleTaskInit)
</UL>
<P><STRONG><a name="[1c8]"></a>OS_IdleTaskInit</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, os_core.o(i.OS_IdleTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_IdleTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c2]"></a>OS_MemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c3]"></a>OS_MsgPoolInit</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, os_msg.o(i.OS_MsgPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_MsgPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1f5]"></a>OS_MsgQFreeAll</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_msg.o(i.OS_MsgQFreeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_MsgQFreeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1ee]"></a>OS_MsgQInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_msg.o(i.OS_MsgQInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
</UL>

<P><STRONG><a name="[1d2]"></a>OS_MutexDbgListAdd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_mutex.o(i.OS_MutexDbgListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>

<P><STRONG><a name="[1d3]"></a>OS_MutexGrpAdd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_mutex.o(i.OS_MutexGrpAdd))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
</UL>

<P><STRONG><a name="[1f4]"></a>OS_MutexGrpPostAll</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_mutex.o(i.OS_MutexGrpPostAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OS_MutexGrpPostAll &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpRemove
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpAdd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1d8]"></a>OS_MutexGrpPrioFindHighest</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_mutex.o(i.OS_MutexGrpPrioFindHighest))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1d7]"></a>OS_MutexGrpRemove</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_mutex.o(i.OS_MutexGrpRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
</UL>

<P><STRONG><a name="[1c4]"></a>OS_MutexInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_mutex.o(i.OS_MutexInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1d5]"></a>OS_Pend</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, os_core.o(i.OS_Pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameAdd
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>

<P><STRONG><a name="[204]"></a>OS_PendDataInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_core.o(i.OS_PendDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[206]"></a>OS_PendDbgNameAdd</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, os_core.o(i.OS_PendDbgNameAdd))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[20b]"></a>OS_PendDbgNameRemove</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, os_core.o(i.OS_PendDbgNameRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[207]"></a>OS_PendListChangePrio</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, os_core.o(i.OS_PendListChangePrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OS_PendListChangePrio &rArr; OS_PendListInsertPrio
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove1
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
</UL>

<P><STRONG><a name="[1d1]"></a>OS_PendListInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_core.o(i.OS_PendListInit))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemClr
</UL>

<P><STRONG><a name="[205]"></a>OS_PendListInsertPrio</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, os_core.o(i.OS_PendListInsertPrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[1f3]"></a>OS_PendListRemove</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, os_core.o(i.OS_PendListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[208]"></a>OS_PendListRemove1</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, os_core.o(i.OS_PendListRemove1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendListRemove1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
</UL>

<P><STRONG><a name="[1e3]"></a>OS_PendObjDel</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, os_core.o(i.OS_PendObjDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OS_PendObjDel &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel1
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>

<P><STRONG><a name="[209]"></a>OS_PendObjDel1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_core.o(i.OS_PendObjDel1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendObjDel1
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
</UL>

<P><STRONG><a name="[1dc]"></a>OS_Post</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, os_core.o(i.OS_Post))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post1
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSemPost
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemPost
</UL>

<P><STRONG><a name="[20c]"></a>OS_Post1</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, os_core.o(i.OS_Post1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_Post1
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[1cf]"></a>OS_PrioGetHighest</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, os_prio.o(i.OS_PrioGetHighest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[1bf]"></a>OS_PrioInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_prio.o(i.OS_PrioInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1da]"></a>OS_PrioInsert</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_prio.o(i.OS_PrioInsert))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[20f]"></a>OS_PrioRemove</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_prio.o(i.OS_PrioRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>

<P><STRONG><a name="[1c5]"></a>OS_QInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1c0]"></a>OS_RdyListInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, os_core.o(i.OS_RdyListInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[20a]"></a>OS_RdyListInsert</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskResume
</UL>

<P><STRONG><a name="[20e]"></a>OS_RdyListInsertHead</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, os_core.o(i.OS_RdyListInsertHead))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[1db]"></a>OS_RdyListInsertTail</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, os_core.o(i.OS_RdyListInsertTail))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>

<P><STRONG><a name="[1d9]"></a>OS_RdyListRemove</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, os_core.o(i.OS_RdyListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskSuspend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[1e2]"></a>OS_SemClr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_sem.o(i.OS_SemClr))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>

<P><STRONG><a name="[1df]"></a>OS_SemDbgListAdd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_sem.o(i.OS_SemDbgListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[1e1]"></a>OS_SemDbgListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, os_sem.o(i.OS_SemDbgListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>

<P><STRONG><a name="[1c6]"></a>OS_SemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_sem.o(i.OS_SemInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1e6]"></a>OS_SemPost</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, os_sem.o(i.OS_SemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[91]"></a>OS_StatTask</STRONG> (Thumb, 542 bytes, Stack size 16 bytes, os_stat.o(i.OS_StatTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = OS_StatTask &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskHook
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxGet
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_stat.o(i.OS_StatTaskInit)
</UL>
<P><STRONG><a name="[1ca]"></a>OS_StatTaskInit</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, os_stat.o(i.OS_StatTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_StatTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[203]"></a>OS_TaskBlock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(i.OS_TaskBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_TaskBlock &rArr; OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[1d4]"></a>OS_TaskChangePrio</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, os_task.o(i.OS_TaskChangePrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OS_TaskChangePrio &rArr; OS_PendListChangePrio &rArr; OS_PendListInsertPrio
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1f0]"></a>OS_TaskDbgListAdd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskDbgListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[1f7]"></a>OS_TaskDbgListRemove</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskDbgListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1c7]"></a>OS_TaskInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1ec]"></a>OS_TaskInitTCB</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskInitTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TaskInitTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[1f8]"></a>OS_TaskResume</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OS_TaskResume &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>

<P><STRONG><a name="[8f]"></a>OS_TaskReturn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_task.o(i.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_MutexGrpPostAll &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[1fb]"></a>OS_TaskSemPost</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, os_task.o(i.OS_TaskSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPost
</UL>

<P><STRONG><a name="[1fd]"></a>OS_TaskSuspend</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OS_TaskSuspend &rArr; OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>

<P><STRONG><a name="[211]"></a>OS_TickListInsert</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, os_tick.o(i.OS_TickListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
</UL>

<P><STRONG><a name="[1fe]"></a>OS_TickListInsertDly</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, os_tick.o(i.OS_TickListInsertDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[1f2]"></a>OS_TickListRemove</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, os_tick.o(i.OS_TickListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_TickListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendObjDel
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[92]"></a>OS_TickTask</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, os_tick.o(i.OS_TickTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_TickTask &rArr; OSTaskSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateTimeout
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdateDly
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tick.o(i.OS_TickTaskInit)
</UL>
<P><STRONG><a name="[1c9]"></a>OS_TickTaskInit</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, os_tick.o(i.OS_TickTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_TickTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[1cb]"></a>OS_TmrInit</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, os_tmr.o(i.OS_TmrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[93]"></a>OS_TmrTask</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, os_tmr.o(i.OS_TmrTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = OS_TmrTask &rArr; OS_TmrLock &rArr; OSMutexPend &rArr; OS_TaskChangePrio &rArr; OS_PendListChangePrio &rArr; OS_PendListInsertPrio
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlink
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrUnlock
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrLock
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OS_TmrInit)
</UL>
<P><STRONG><a name="[216]"></a>OS_TmrUnlink</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_tmr.o(i.OS_TmrUnlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_TmrUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[224]"></a>Period_Hook</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sys_module.o(i.Period_Hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Period_Hook
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Task
</UL>

<P><STRONG><a name="[136]"></a>RTC_Pre_Config</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_rtc.o(i.RTC_Pre_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_Pre_Config &rArr; rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_rtc_clock_config
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[137]"></a>RTC_Setup</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, bsp_rtc.o(i.RTC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_Setup &rArr; rtc_init &rArr; rtc_register_sync_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[12]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.RTC_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WKUP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_get
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_flag_clear
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[182]"></a>Ringbuff_GetFreeSize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sys_ringbuff.o(i.Ringbuff_GetFreeSize))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSimpleBuff_GetFreeSize
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupSendBuff_GetFreeSize
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupBuff_GetFreeSize
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerBuff_GetFreeSize
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpBuff_GetFreeSize
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpClientBuff_GetFreeSize
</UL>

<P><STRONG><a name="[243]"></a>Ringbuff_GetUsedSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys_ringbuff.o(i.Ringbuff_GetUsedSize))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupSendBuff_GetUsedSize
</UL>

<P><STRONG><a name="[183]"></a>Ringbuff_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_ringbuff.o(i.Ringbuff_Init))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSimpleBuff_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupSendBuff_Init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupBuff_Init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerBuff_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpBuff_Init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpClientBuff_Init
</UL>

<P><STRONG><a name="[185]"></a>Ringbuff_Pop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sys_ringbuff.o(i.Ringbuff_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSimpleBuff_Pop
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupSendBuff_Pop
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupBuff_Pop
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerBuff_Pop
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpBuff_Pop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpClientBuff_Pop
</UL>

<P><STRONG><a name="[187]"></a>Ringbuff_Push</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, sys_ringbuff.o(i.Ringbuff_Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Ringbuff_Push &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSimpleBuff_Push
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupSendBuff_Push
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupBuff_Push
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerBuff_Push
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpBuff_Push
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpClientBuff_Push
</UL>

<P><STRONG><a name="[94]"></a>Sem_Create</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, sys_sem.o(i.Sem_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Sem_Create &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_sem.o(i.Sem_Init)
</UL>
<P><STRONG><a name="[95]"></a>Sem_Delete</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sys_sem.o(i.Sem_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Sem_Delete &rArr; OSSemDel &rArr; OS_PendObjDel &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_sem.o(i.Sem_Init)
</UL>
<P><STRONG><a name="[f0]"></a>Sem_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sys_sem.o(i.Sem_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sem_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_sem.o(init.item.1)
</UL>
<P><STRONG><a name="[96]"></a>Sem_Pend</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sys_sem.o(i.Sem_Pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Sem_Pend &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_sem.o(i.Sem_Init)
</UL>
<P><STRONG><a name="[97]"></a>Sem_Post</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sys_sem.o(i.Sem_Post))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Sem_Post &rArr; OSSemPost &rArr; OS_SemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_sem.o(i.Sem_Init)
</UL>
<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OSTaskSemPost &rArr; OS_TaskSemPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>SysTimer_DiffLocalTime</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, sys_timer.o(i.SysTimer_DiffLocalTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysTimer_DiffLocalTime
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer_GetLocalTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_timer.o(i.SysTimer_Init)
</UL>
<P><STRONG><a name="[9e]"></a>SysTimer_DiffRunTime</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, sys_timer.o(i.SysTimer_DiffRunTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysTimer_DiffRunTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer_GetRunTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_timer.o(i.SysTimer_Init)
</UL>
<P><STRONG><a name="[99]"></a>SysTimer_GetLocalTime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_timer.o(i.SysTimer_GetLocalTime))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer_DiffLocalTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_timer.o(i.SysTimer_Init)
</UL>
<P><STRONG><a name="[9a]"></a>SysTimer_GetRunTime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_timer.o(i.SysTimer_GetRunTime))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer_DiffRunTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_timer.o(i.SysTimer_Init)
</UL>
<P><STRONG><a name="[f1]"></a>SysTimer_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sys_timer.o(i.SysTimer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysTimer_Init &rArr; BSP_RTC_Init &rArr; BSP_Rtc_Time_Get &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_timer.o(init.item.1)
</UL>
<P><STRONG><a name="[a0]"></a>SysTimer_ResetReason</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_timer.o(i.SysTimer_ResetReason))
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_GetResetReason
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_timer.o(i.SysTimer_Init)
</UL>
<P><STRONG><a name="[98]"></a>SysTimer_SetLocalTime</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, sys_timer.o(i.SysTimer_SetLocalTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SysTimer_SetLocalTime &rArr; SysTimer_UpdateTime &rArr; BSP_Rtc_Time_Get &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Set
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer_UpdateTime
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_timer.o(i.SysTimer_Init)
</UL>
<P><STRONG><a name="[9d]"></a>SysTimer_Sleep</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sys_timer.o(i.SysTimer_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = SysTimer_Sleep &rArr; OSTimeDlyHMSM &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_timer.o(i.SysTimer_Init)
</UL>
<P><STRONG><a name="[9b]"></a>SysTimer_UpdateTime</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sys_timer.o(i.SysTimer_UpdateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SysTimer_UpdateTime &rArr; BSP_Rtc_Time_Get &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer_SetLocalTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_timer.o(i.SysTimer_Init)
</UL>
<P><STRONG><a name="[9c]"></a>SysTimer_UpdateTimeMs</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, sys_timer.o(i.SysTimer_UpdateTimeMs))
<BR>[Address Reference Count : 1]<UL><LI> sys_timer.o(i.SysTimer_Init)
</UL>
<P><STRONG><a name="[2fe]"></a>Sys_Delay_Reset</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sys_base.o(i.Sys_Delay_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sys_Delay_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_period
</UL>

<P><STRONG><a name="[2ff]"></a>Sys_ModuleReset</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, sys_base.o(i.Sys_ModuleReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sys_ModuleReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
</UL>

<P><STRONG><a name="[221]"></a>Sys_ModuleResetInit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_base.o(i.Sys_ModuleResetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sys_ModuleResetInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Task
</UL>

<P><STRONG><a name="[222]"></a>Sys_RecoveryBtnInit</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, sys_base.o(i.Sys_RecoveryBtnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sys_RecoveryBtnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Task
</UL>

<P><STRONG><a name="[a1]"></a>Sys_RecoveryBtnLongPressHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sys_base.o(i.Sys_RecoveryBtnLongPressHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Sys_RecoveryBtnLongPressHandler &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_base.o(i.Sys_RecoveryBtnInit)
</UL>
<P><STRONG><a name="[7f]"></a>Sys_State_Task</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, sys_base.o(i.Sys_State_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Sys_State_Task &rArr; DispTaskInfo &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_Hook
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPO_Low
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPO_High
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_WdtFeedInit
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_WdtFeed
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_SystemLedInit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_RecoveryBtnInit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_ModuleResetInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTaskInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.Init_Task)
</UL>
<P><STRONG><a name="[223]"></a>Sys_SystemLedInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_base.o(i.Sys_SystemLedInit))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Task
</UL>

<P><STRONG><a name="[220]"></a>Sys_WdtFeed</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, sys_base.o(i.Sys_WdtFeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sys_WdtFeed
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Task
</UL>

<P><STRONG><a name="[21f]"></a>Sys_WdtFeedInit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_base.o(i.Sys_WdtFeedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sys_WdtFeedInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Task
</UL>

<P><STRONG><a name="[69]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_gd32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(.text)
</UL>
<P><STRONG><a name="[1ac]"></a>Task_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sys_module.o(i.Task_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[a2]"></a>Task_Module_Comm</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, task_module_comm.o(i.Task_Module_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Task_Module_Comm &rArr; Task_Module_Comm_Init &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Module_Comm_Init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Sem_Pend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_module_comm.o(i.Task_Module_Comm_Create)
</UL>
<P><STRONG><a name="[fd]"></a>Task_Module_Comm_Create</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, task_module_comm.o(i.Task_Module_Comm_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Task_Module_Comm_Create &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_module_comm.o(task.item.1)
</UL>
<P><STRONG><a name="[225]"></a>Task_Module_Comm_Init</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, task_module_comm.o(i.Task_Module_Comm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Task_Module_Comm_Init &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Module_Comm
</UL>

<P><STRONG><a name="[227]"></a>TcpClientBuff_GetFreeSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcpclientbuff.o(i.TcpClientBuff_GetFreeSize))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_GetFreeSize
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_recv
</UL>

<P><STRONG><a name="[228]"></a>TcpClientBuff_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcpclientbuff.o(i.TcpClientBuff_Init))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
</UL>

<P><STRONG><a name="[229]"></a>TcpClientBuff_Pop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcpclientbuff.o(i.TcpClientBuff_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TcpClientBuff_Pop &rArr; Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_read_data
</UL>

<P><STRONG><a name="[22a]"></a>TcpClientBuff_Push</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcpclientbuff.o(i.TcpClientBuff_Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TcpClientBuff_Push &rArr; Ringbuff_Push &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Push
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_recv
</UL>

<P><STRONG><a name="[22b]"></a>TcpServerBuff_GetFreeSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcpserverbuff.o(i.TcpServerBuff_GetFreeSize))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_GetFreeSize
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_recv (via Veneer)
</UL>

<P><STRONG><a name="[22c]"></a>TcpServerBuff_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcpserverbuff.o(i.TcpServerBuff_Init))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_init
</UL>

<P><STRONG><a name="[22d]"></a>TcpServerBuff_Pop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcpserverbuff.o(i.TcpServerBuff_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TcpServerBuff_Pop &rArr; Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_read_data
</UL>

<P><STRONG><a name="[22e]"></a>TcpServerBuff_Push</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcpserverbuff.o(i.TcpServerBuff_Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TcpServerBuff_Push &rArr; Ringbuff_Push &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Push
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_recv (via Veneer)
</UL>

<P><STRONG><a name="[230]"></a>Telnet_Display_Cmd_Prompt</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, telnet.o(i.Telnet_Display_Cmd_Prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Telnet_Display_Cmd_Prompt &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc_end
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
</UL>

<P><STRONG><a name="[1b7]"></a>Telnet_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, telnet.o(i.Telnet_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Telnet_Init &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_pcb_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Periodic_Task
</UL>

<P><STRONG><a name="[43]"></a>UART3_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART3_IRQHandler &rArr; BSP_USARTx_DMA_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>UART6_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.UART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART6_IRQHandler &rArr; BSP_USARTx_DMA_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>UART7_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART7_IRQHandler &rArr; BSP_USARTx_DMA_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART0_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART0_IRQHandler &rArr; BSP_USARTx_DMA_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART1_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; BSP_USARTx_DMA_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART2_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; BSP_USARTx_DMA_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USART5_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.USART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART5_IRQHandler &rArr; BSP_USARTx_DMA_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_Sem_Post
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[239]"></a>UdpBuff_GetFreeSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udpbuff.o(i.UdpBuff_GetFreeSize))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_GetFreeSize
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_ip_search_recv
</UL>

<P><STRONG><a name="[23a]"></a>UdpBuff_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, udpbuff.o(i.UdpBuff_Init))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_ip_search_init
</UL>

<P><STRONG><a name="[23b]"></a>UdpBuff_Pop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udpbuff.o(i.UdpBuff_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UdpBuff_Pop &rArr; Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_ip_search_read_data
</UL>

<P><STRONG><a name="[23c]"></a>UdpBuff_Push</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udpbuff.o(i.UdpBuff_Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UdpBuff_Push &rArr; Ringbuff_Push &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Push
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_ip_search_recv
</UL>

<P><STRONG><a name="[23d]"></a>UdpGroupBuff_GetFreeSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udpgroupbuff.o(i.UdpGroupBuff_GetFreeSize))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_GetFreeSize
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_recv (via Veneer)
</UL>

<P><STRONG><a name="[23e]"></a>UdpGroupBuff_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udpgroupbuff.o(i.UdpGroupBuff_Init))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_init
</UL>

<P><STRONG><a name="[23f]"></a>UdpGroupBuff_Pop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udpgroupbuff.o(i.UdpGroupBuff_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UdpGroupBuff_Pop &rArr; Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_read_data
</UL>

<P><STRONG><a name="[240]"></a>UdpGroupBuff_Push</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udpgroupbuff.o(i.UdpGroupBuff_Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UdpGroupBuff_Push &rArr; Ringbuff_Push &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Push
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_recv (via Veneer)
</UL>

<P><STRONG><a name="[241]"></a>UdpGroupSendBuff_GetFreeSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udpgroupbuff.o(i.UdpGroupSendBuff_GetFreeSize))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_GetFreeSize
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_send_data_to_rb
</UL>

<P><STRONG><a name="[242]"></a>UdpGroupSendBuff_GetUsedSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udpgroupbuff.o(i.UdpGroupSendBuff_GetUsedSize))
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_GetUsedSize
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send_period
</UL>

<P><STRONG><a name="[244]"></a>UdpGroupSendBuff_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udpgroupbuff.o(i.UdpGroupSendBuff_Init))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_init
</UL>

<P><STRONG><a name="[245]"></a>UdpGroupSendBuff_Pop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udpgroupbuff.o(i.UdpGroupSendBuff_Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UdpGroupSendBuff_Pop &rArr; Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send_period
</UL>

<P><STRONG><a name="[246]"></a>UdpGroupSendBuff_Push</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udpgroupbuff.o(i.UdpGroupSendBuff_Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UdpGroupSendBuff_Push &rArr; Ringbuff_Push &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ringbuff_Push
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_send_data_to_rb
</UL>

<P><STRONG><a name="[f5]"></a>Upgrade_Flash_If_Init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, api_upgrade.o(i.Upgrade_Flash_If_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Upgrade_Flash_If_Init &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_upgrade.o(init.item.3)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UsageFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[247]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[352]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[163]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_parse_info
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_system_setup
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLogSendPeriodHandler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_mac_dma_config
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Restart
</UL>

<P><STRONG><a name="[353]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[354]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[249]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[355]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[18c]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_call
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_timeout
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc_end
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_callback
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_Display_Cmd_Prompt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_poll
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_cmd_process
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_Delete_Remote_Cmdline
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_debug_uart_data_handle
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_cmd_process
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Uart_Display_Cmd_Prompt
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_recv
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Uart_Delete_Remote_Cmdline
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtime
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_usage
</UL>

<P><STRONG><a name="[356]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[357]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[24a]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[358]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[359]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[35a]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[18e]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>

<P><STRONG><a name="[24b]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[35b]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[35c]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[35d]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[18d]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>

<P><STRONG><a name="[35e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[35f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[360]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[123]"></a>can0_config</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, bsp_can.o(i.can0_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = can0_config &rArr; can_filter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_interrupt_enable
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter_init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN0_Init
</UL>

<P><STRONG><a name="[122]"></a>can0_gpio_config</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsp_can.o(i.can0_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can0_gpio_config &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN0_Init
</UL>

<P><STRONG><a name="[251]"></a>can_deinit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gd32f4xx_can.o(i.can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can0_config
</UL>

<P><STRONG><a name="[253]"></a>can_filter_init</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, gd32f4xx_can.o(i.can_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can_filter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can0_config
</UL>

<P><STRONG><a name="[252]"></a>can_init</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, gd32f4xx_can.o(i.can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can0_config
</UL>

<P><STRONG><a name="[254]"></a>can_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_can.o(i.can_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can0_config
</UL>

<P><STRONG><a name="[337]"></a>can_message_receive</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, gd32f4xx_can.o(i.can_message_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_message_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX1_IRQHandler (via Veneer)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_RX0_IRQHandler (via Veneer)
</UL>

<P><STRONG><a name="[125]"></a>can_message_transmit</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, gd32f4xx_can.o(i.can_message_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_message_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN0_Send
</UL>

<P><STRONG><a name="[127]"></a>can_transmission_stop</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32f4xx_can.o(i.can_transmission_stop))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN0_Send
</UL>

<P><STRONG><a name="[126]"></a>can_transmit_states</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, gd32f4xx_can.o(i.can_transmit_states))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN0_Send
</UL>

<P><STRONG><a name="[258]"></a>cmd_parse_info</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, cli_cmd.o(i.cmd_parse_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cmd_parse_info &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_cmd_process
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_cmd_process
</UL>

<P><STRONG><a name="[259]"></a>cmd_usage</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, cli_cmd.o(i.cmd_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = cmd_usage &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_data_send
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;man
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_process
</UL>

<P><STRONG><a name="[0]"></a>debug_process</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, cli_cmd.o(i.debug_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = debug_process &rArr; cmd_usage &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_usage
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_cmd.o(debug_cmd.item.1)
</UL>
<P><STRONG><a name="[25b]"></a>debug_uart_cmd_process</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, console_uart.o(i.debug_uart_cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = debug_uart_cmd_process &rArr; find_cmd &rArr; cmd_call &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_parse_info
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Debug_Uart_Cmd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_data_send
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_recv
</UL>

<P><STRONG><a name="[194]"></a>debug_uart_data_send</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, console_uart.o(i.debug_uart_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = debug_uart_data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_call
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_debug_uart_data_handle
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_cmd_process
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Uart_Display_Cmd_Prompt
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_recv
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Uart_Delete_Remote_Cmdline
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtime
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_usage
</UL>

<P><STRONG><a name="[25f]"></a>dhcp_arp_reply</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[15e]"></a>dma_channel_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f4xx_dma.o(i.dma_channel_disable))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_SendSucc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Receive
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
</UL>

<P><STRONG><a name="[15b]"></a>dma_channel_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f4xx_dma.o(i.dma_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Tx_DMA_Start
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Restart
</UL>

<P><STRONG><a name="[159]"></a>dma_channel_subperipheral_select</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f4xx_dma.o(i.dma_channel_subperipheral_select))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
</UL>

<P><STRONG><a name="[15d]"></a>dma_circulation_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f4xx_dma.o(i.dma_circulation_disable))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
</UL>

<P><STRONG><a name="[158]"></a>dma_circulation_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f4xx_dma.o(i.dma_circulation_enable))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
</UL>

<P><STRONG><a name="[155]"></a>dma_deinit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, gd32f4xx_dma.o(i.dma_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
</UL>

<P><STRONG><a name="[15a]"></a>dma_interrupt_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f4xx_dma.o(i.dma_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
</UL>

<P><STRONG><a name="[154]"></a>dma_interrupt_flag_clear</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, gd32f4xx_dma.o(i.dma_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_SendSucc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel6_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel5_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Tx_DMA_Start
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Restart
</UL>

<P><STRONG><a name="[18a]"></a>dma_interrupt_flag_get</STRONG> (Thumb, 258 bytes, Stack size 20 bytes, gd32f4xx_dma.o(i.dma_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dma_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel6_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel4_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel0_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>dma_memory_address_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f4xx_dma.o(i.dma_memory_address_config))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Tx_DMA_Start
</UL>

<P><STRONG><a name="[157]"></a>dma_single_data_mode_init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, gd32f4xx_dma.o(i.dma_single_data_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_single_data_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
</UL>

<P><STRONG><a name="[164]"></a>dma_transfer_number_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_dma.o(i.dma_transfer_number_config))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Tx_DMA_Start
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Restart
</UL>

<P><STRONG><a name="[161]"></a>dma_transfer_number_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_dma.o(i.dma_transfer_number_get))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Receive
</UL>

<P><STRONG><a name="[274]"></a>dns_tmr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dns.o(i.dns_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_periodic_handle
</UL>

<P><STRONG><a name="[275]"></a>enet_deinit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f4xx_enet.o(i.enet_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enet_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_initpara_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_mac_dma_config
</UL>

<P><STRONG><a name="[2dc]"></a>enet_desc_information_get</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_desc_information_get))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[2d9]"></a>enet_descriptors_chain_init</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, gd32f4xx_enet.o(i.enet_descriptors_chain_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enet_descriptors_chain_init
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[277]"></a>enet_enable</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gd32f4xx_enet.o(i.enet_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enet_enable &rArr; enet_tx_enable &rArr; enet_txfifo_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_tx_enable
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_rx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[2dd]"></a>enet_frame_receive</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, gd32f4xx_enet.o(i.enet_frame_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enet_frame_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[2de]"></a>enet_frame_transmit</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, gd32f4xx_enet.o(i.enet_frame_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = enet_frame_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[27d]"></a>enet_init</STRONG> (Thumb, 564 bytes, Stack size 32 bytes, gd32f4xx_enet.o(i.enet_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = enet_init &rArr; enet_phy_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_phy_write_read
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_phy_config
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_delay
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_default_init
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_mac_dma_config
</UL>

<P><STRONG><a name="[276]"></a>enet_initpara_reset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_initpara_reset))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_deinit
</UL>

<P><STRONG><a name="[2d8]"></a>enet_mac_address_set</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_mac_address_set))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[27e]"></a>enet_phy_config</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gd32f4xx_enet.o(i.enet_phy_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = enet_phy_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_phy_write_read
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_init
</UL>

<P><STRONG><a name="[281]"></a>enet_phy_write_read</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, gd32f4xx_enet.o(i.enet_phy_write_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = enet_phy_write_read
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_phy_config
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_init
</UL>

<P><STRONG><a name="[2da]"></a>enet_rx_desc_immediate_receive_complete_interrupt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_rx_desc_immediate_receive_complete_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[279]"></a>enet_rx_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_rx_enable))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_enable
</UL>

<P><STRONG><a name="[285]"></a>enet_rxframe_drop</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_rxframe_drop))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_rxframe_size_get
</UL>

<P><STRONG><a name="[1ba]"></a>enet_rxframe_size_get</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, gd32f4xx_enet.o(i.enet_rxframe_size_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = enet_rxframe_size_get
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_rxframe_drop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Handle
</UL>

<P><STRONG><a name="[283]"></a>enet_software_reset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gd32f4xx_enet.o(i.enet_software_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enet_software_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_mac_dma_config
</UL>

<P><STRONG><a name="[1b2]"></a>enet_system_setup</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_enet.o(i.enet_system_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = enet_system_setup &rArr; enet_mac_dma_config &rArr; enet_init &rArr; enet_phy_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_mac_dma_config
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_gpio_config
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enet_Phy_Reset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lwip_Init
</UL>

<P><STRONG><a name="[2db]"></a>enet_transmit_checksum_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_transmit_checksum_config))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[278]"></a>enet_tx_enable</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32f4xx_enet.o(i.enet_tx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = enet_tx_enable &rArr; enet_txfifo_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_txfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_enable
</UL>

<P><STRONG><a name="[286]"></a>enet_txfifo_flush</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f4xx_enet.o(i.enet_txfifo_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enet_txfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_tx_enable
</UL>

<P><STRONG><a name="[a6]"></a>etharp_output</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[28f]"></a>etharp_query</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[290]"></a>etharp_request</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[294]"></a>etharp_tmr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_periodic_handle
</UL>

<P><STRONG><a name="[d1]"></a>ethernet_input</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.lwip_stack_init)
</UL>
<P><STRONG><a name="[d2]"></a>ethernetif_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; enet_descriptors_chain_init
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.lwip_stack_init)
</UL>
<P><STRONG><a name="[297]"></a>ethernetif_input</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_pkt_handle
</UL>

<P><STRONG><a name="[13a]"></a>exti_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_exti.o(i.exti_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>exti_init</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, gd32f4xx_exti.o(i.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[199]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_exti.o(i.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f4xx_exti.o(i.exti_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[25c]"></a>find_cmd</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, cli_cmd.o(i.find_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = find_cmd &rArr; cmd_call &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_call
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_usage
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_cmd_process
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_cmd_process
</UL>

<P><STRONG><a name="[19e]"></a>fmc_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_fmc.o(i.fmc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
</UL>

<P><STRONG><a name="[1a1]"></a>fmc_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_fmc.o(i.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
</UL>

<P><STRONG><a name="[29a]"></a>fmc_ready_wait</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, gd32f4xx_fmc.o(i.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_sector_erase
</UL>

<P><STRONG><a name="[1a0]"></a>fmc_sector_erase</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gd32f4xx_fmc.o(i.fmc_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fmc_sector_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
</UL>

<P><STRONG><a name="[29b]"></a>fmc_state_get</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gd32f4xx_fmc.o(i.fmc_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[19d]"></a>fmc_unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f4xx_fmc.o(i.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
</UL>

<P><STRONG><a name="[1a3]"></a>fmc_word_program</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, gd32f4xx_fmc.o(i.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write
</UL>

<P><STRONG><a name="[a4]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bsp_uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fputc &rArr; BSP_USARTx_Send_Buff &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Send_Buff
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[14c]"></a>gpio_af_set</STRONG> (Thumb, 100 bytes, Stack size 28 bytes, gd32f4xx_gpio.o(i.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_gpio_config
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can0_gpio_config
</UL>

<P><STRONG><a name="[12f]"></a>gpio_input_bit_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPI_State_Get
</UL>

<P><STRONG><a name="[12d]"></a>gpio_mode_set</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, gd32f4xx_gpio.o(i.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPO_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPI_Poll_Init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_gpio_config
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can0_gpio_config
</UL>

<P><STRONG><a name="[131]"></a>gpio_output_options_set</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gd32f4xx_gpio.o(i.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPO_Init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_gpio_config
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can0_gpio_config
</UL>

<P><STRONG><a name="[100]"></a>hard_fault_handler_c</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.hard_fault_handler_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hard_fault_handler_c &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[29c]"></a>icmp_dest_unreach</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[29e]"></a>icmp_input</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = icmp_input &rArr; ping_callback &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_callback
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[235]"></a>icmp_pcb_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, telnet.o(i.icmp_pcb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = icmp_pcb_init &rArr; raw_new &rArr; memp_malloc_fn &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_Init
</UL>

<P><STRONG><a name="[2a5]"></a>icmp_time_exceeded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[2a8]"></a>igmp_input</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, igmp.o(i.igmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = igmp_input &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[2ac]"></a>igmp_joingroup</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, igmp.o(i.igmp_joingroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = igmp_joingroup &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_init
</UL>

<P><STRONG><a name="[2a9]"></a>igmp_lookfor_group</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, igmp.o(i.igmp_lookfor_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>

<P><STRONG><a name="[2b0]"></a>igmp_report_groups</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, igmp.o(i.igmp_report_groups))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = igmp_report_groups &rArr; igmp_delaying_member
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
</UL>

<P><STRONG><a name="[2b1]"></a>igmp_start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, igmp.o(i.igmp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = igmp_start &rArr; igmp_lookup_group &rArr; memp_malloc_fn &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[2b3]"></a>igmp_tmr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, igmp.o(i.igmp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = igmp_tmr &rArr; igmp_timeout &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_periodic_handle
</UL>

<P><STRONG><a name="[2a3]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[2a0]"></a>inet_chksum_pbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[28c]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ip_addr.o(i.ip4_addr_isbroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[2b5]"></a>ip_frag</STRONG> (Thumb, 392 bytes, Stack size 88 bytes, ip_frag.o(i.ip_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>

<P><STRONG><a name="[295]"></a>ip_input</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[2a4]"></a>ip_output</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[2a1]"></a>ip_output_if</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[2ab]"></a>ip_output_if_opt</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, ip.o(i.ip_output_if_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
</UL>

<P><STRONG><a name="[2bc]"></a>ip_reass</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ip_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[2c0]"></a>ip_route</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>

<P><STRONG><a name="[2c7]"></a>ipaddr_ntoa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ip_addr.o(i.ipaddr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipaddr_ntoa &rArr; ipaddr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_recv (via Veneer)
</UL>

<P><STRONG><a name="[2c8]"></a>ipaddr_ntoa_r</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ip_addr.o(i.ipaddr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ipaddr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
</UL>

<P><STRONG><a name="[e9]"></a>llif_can_Init</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, llif_can.o(i.llif_can_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llif_can_Init &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_can.o(inf.item.2)
</UL>
<P><STRONG><a name="[aa]"></a>llif_can_close</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llif_can.o(i.llif_can_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_can_close &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_can.o(i.llif_can_Init)
</UL>
<P><STRONG><a name="[ad]"></a>llif_can_deinit</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llif_can.o(i.llif_can_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_can_deinit &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_can.o(i.llif_can_Init)
</UL>
<P><STRONG><a name="[a9]"></a>llif_can_open</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, llif_can.o(i.llif_can_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llif_can_open &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN0_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_can.o(i.llif_can_Init)
</UL>
<P><STRONG><a name="[ac]"></a>llif_can_read</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, llif_can.o(i.llif_can_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = llif_can_read &rArr; CanSimpleBuff_Pop &rArr; Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSimpleBuff_Pop
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_can.o(i.llif_can_Init)
</UL>
<P><STRONG><a name="[ab]"></a>llif_can_write</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, llif_can.o(i.llif_can_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = llif_can_write &rArr; BSP_CAN0_SendBuff &rArr; BSP_CAN0_Send &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN0_SendBuff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_can.o(i.llif_can_Init)
</UL>
<P><STRONG><a name="[eb]"></a>llif_gpio_Init</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, llif_gpio.o(i.llif_gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llif_gpio_Init &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPO_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPI_Poll_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_gpio.o(inf.item.2)
</UL>
<P><STRONG><a name="[af]"></a>llif_gpio_close</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, llif_gpio.o(i.llif_gpio_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_gpio_close &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_gpio.o(i.llif_gpio_Init)
</UL>
<P><STRONG><a name="[b2]"></a>llif_gpio_deinit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, llif_gpio.o(i.llif_gpio_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_gpio_deinit &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_gpio.o(i.llif_gpio_Init)
</UL>
<P><STRONG><a name="[ae]"></a>llif_gpio_open</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, llif_gpio.o(i.llif_gpio_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_gpio_open &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_gpio.o(i.llif_gpio_Init)
</UL>
<P><STRONG><a name="[b1]"></a>llif_gpio_read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, llif_gpio.o(i.llif_gpio_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llif_gpio_read
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPI_State_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_gpio.o(i.llif_gpio_Init)
</UL>
<P><STRONG><a name="[b0]"></a>llif_gpio_write</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, llif_gpio.o(i.llif_gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llif_gpio_write
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPO_Low
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPO_High
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPO_Toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_gpio.o(i.llif_gpio_Init)
</UL>
<P><STRONG><a name="[ea]"></a>llif_inter_flash_Init</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, llif_inter_flash.o(i.llif_inter_flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llif_inter_flash_Init &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_inter_flash.o(inf.item.2)
</UL>
<P><STRONG><a name="[b4]"></a>llif_inter_flash_close</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llif_inter_flash.o(i.llif_inter_flash_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_inter_flash_close &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_inter_flash.o(i.llif_inter_flash_Init)
</UL>
<P><STRONG><a name="[b7]"></a>llif_inter_flash_deinit</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llif_inter_flash.o(i.llif_inter_flash_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_inter_flash_deinit &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_inter_flash.o(i.llif_inter_flash_Init)
</UL>
<P><STRONG><a name="[b3]"></a>llif_inter_flash_open</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, llif_inter_flash.o(i.llif_inter_flash_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llif_inter_flash_open &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_inter_flash.o(i.llif_inter_flash_Init)
</UL>
<P><STRONG><a name="[b6]"></a>llif_inter_flash_read</STRONG> (Thumb, 202 bytes, Stack size 96 bytes, llif_inter_flash.o(i.llif_inter_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = llif_inter_flash_read &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Read
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_inter_flash.o(i.llif_inter_flash_Init)
</UL>
<P><STRONG><a name="[b5]"></a>llif_inter_flash_write</STRONG> (Thumb, 448 bytes, Stack size 64 bytes, llif_inter_flash.o(i.llif_inter_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = llif_inter_flash_write &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_inter_flash.o(i.llif_inter_flash_Init)
</UL>
<P><STRONG><a name="[b9]"></a>llif_tcpclient_close</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llif_tcpclient.o(i.llif_tcpclient_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_tcpclient_close &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_tcpclient.o(i.llif_tcpclient_init)
</UL>
<P><STRONG><a name="[bc]"></a>llif_tcpclient_deinit</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llif_tcpclient.o(i.llif_tcpclient_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_tcpclient_deinit &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_tcpclient.o(i.llif_tcpclient_init)
</UL>
<P><STRONG><a name="[ed]"></a>llif_tcpclient_init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, llif_tcpclient.o(i.llif_tcpclient_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llif_tcpclient_init &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_tcpclient.o(inf.item.2)
</UL>
<P><STRONG><a name="[b8]"></a>llif_tcpclient_open</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, llif_tcpclient.o(i.llif_tcpclient_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = llif_tcpclient_open &rArr; tcpclient_init &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_tcpclient.o(i.llif_tcpclient_init)
</UL>
<P><STRONG><a name="[bb]"></a>llif_tcpclient_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, llif_tcpclient.o(i.llif_tcpclient_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = llif_tcpclient_read &rArr; tcpclient_read_data &rArr; TcpClientBuff_Pop &rArr; Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_tcpclient.o(i.llif_tcpclient_init)
</UL>
<P><STRONG><a name="[ba]"></a>llif_tcpclient_write</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, llif_tcpclient.o(i.llif_tcpclient_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = llif_tcpclient_write &rArr; tcpclient_send_data &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_tcpclient.o(i.llif_tcpclient_init)
</UL>
<P><STRONG><a name="[be]"></a>llif_tcpserver_close</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llif_tcpserver.o(i.llif_tcpserver_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_tcpserver_close &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_tcpserver.o(i.llif_tcpserver_init)
</UL>
<P><STRONG><a name="[c1]"></a>llif_tcpserver_deinit</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llif_tcpserver.o(i.llif_tcpserver_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_tcpserver_deinit &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_tcpserver.o(i.llif_tcpserver_init)
</UL>
<P><STRONG><a name="[e7]"></a>llif_tcpserver_init</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, llif_tcpserver.o(i.llif_tcpserver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llif_tcpserver_init &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_tcpserver.o(inf.item.2)
</UL>
<P><STRONG><a name="[bd]"></a>llif_tcpserver_open</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, llif_tcpserver.o(i.llif_tcpserver_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = llif_tcpserver_open &rArr; tcpserver_init &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_tcpserver.o(i.llif_tcpserver_init)
</UL>
<P><STRONG><a name="[c0]"></a>llif_tcpserver_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, llif_tcpserver.o(i.llif_tcpserver_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = llif_tcpserver_read &rArr; tcpserver_read_data &rArr; TcpServerBuff_Pop &rArr; Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_tcpserver.o(i.llif_tcpserver_init)
</UL>
<P><STRONG><a name="[bf]"></a>llif_tcpserver_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llif_tcpserver.o(i.llif_tcpserver_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = llif_tcpserver_write &rArr; tcpserver_send_data &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_tcpserver.o(i.llif_tcpserver_init)
</UL>
<P><STRONG><a name="[ec]"></a>llif_uart_Init</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, llif_uart.o(i.llif_uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llif_uart_Init &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_uart.o(inf.item.2)
</UL>
<P><STRONG><a name="[c3]"></a>llif_uart_close</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llif_uart.o(i.llif_uart_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_uart_close &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_uart.o(i.llif_uart_Init)
</UL>
<P><STRONG><a name="[c6]"></a>llif_uart_deinit</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llif_uart.o(i.llif_uart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_uart_deinit &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_uart.o(i.llif_uart_Init)
</UL>
<P><STRONG><a name="[c2]"></a>llif_uart_open</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, llif_uart.o(i.llif_uart_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = llif_uart_open &rArr; BSP_USARTx_DMA_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_uart.o(i.llif_uart_Init)
</UL>
<P><STRONG><a name="[c5]"></a>llif_uart_read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, llif_uart.o(i.llif_uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = llif_uart_read &rArr; BSP_USARTx_Get_Char &rArr; BSP_USARTx_DMA_Restart &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Get_Char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_uart.o(i.llif_uart_Init)
</UL>
<P><STRONG><a name="[c4]"></a>llif_uart_write</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llif_uart.o(i.llif_uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llif_uart_write &rArr; BSP_USARTx_Send_Buff &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Send_Buff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_uart.o(i.llif_uart_Init)
</UL>
<P><STRONG><a name="[c8]"></a>llif_udp_close</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llif_udp.o(i.llif_udp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_udp_close &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_udp.o(i.llif_udp_init)
</UL>
<P><STRONG><a name="[cb]"></a>llif_udp_deinit</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llif_udp.o(i.llif_udp_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_udp_deinit &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_udp.o(i.llif_udp_init)
</UL>
<P><STRONG><a name="[ee]"></a>llif_udp_init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, llif_udp.o(i.llif_udp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llif_udp_init &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_udp.o(inf.item.2)
</UL>
<P><STRONG><a name="[c7]"></a>llif_udp_open</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, llif_udp.o(i.llif_udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = llif_udp_open &rArr; udp_ip_search_init &rArr; udp_new &rArr; memp_malloc_fn &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_ip_search_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_udp.o(i.llif_udp_init)
</UL>
<P><STRONG><a name="[ca]"></a>llif_udp_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, llif_udp.o(i.llif_udp_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = llif_udp_read &rArr; udp_ip_search_read_data &rArr; UdpBuff_Pop &rArr; Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_ip_search_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_udp.o(i.llif_udp_init)
</UL>
<P><STRONG><a name="[c9]"></a>llif_udp_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llif_udp.o(i.llif_udp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = llif_udp_write &rArr; udp_ip_search_send_data &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_ip_search_send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_udp.o(i.llif_udp_init)
</UL>
<P><STRONG><a name="[cd]"></a>llif_udpgroup_close</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llif_udpgroup.o(i.llif_udpgroup_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_udpgroup_close &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_udpgroup.o(i.llif_udpgroup_init)
</UL>
<P><STRONG><a name="[d0]"></a>llif_udpgroup_deinit</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, llif_udpgroup.o(i.llif_udpgroup_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llif_udpgroup_deinit &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_udpgroup.o(i.llif_udpgroup_init)
</UL>
<P><STRONG><a name="[e8]"></a>llif_udpgroup_init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, llif_udpgroup.o(i.llif_udpgroup_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llif_udpgroup_init &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_udpgroup.o(inf.item.2)
</UL>
<P><STRONG><a name="[cc]"></a>llif_udpgroup_open</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, llif_udpgroup.o(i.llif_udpgroup_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = llif_udpgroup_open &rArr; udp_group_init &rArr; igmp_joingroup &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_udpgroup.o(i.llif_udpgroup_init)
</UL>
<P><STRONG><a name="[cf]"></a>llif_udpgroup_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, llif_udpgroup.o(i.llif_udpgroup_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = llif_udpgroup_read &rArr; udp_group_read_data &rArr; UdpGroupBuff_Pop &rArr; Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_udpgroup.o(i.llif_udpgroup_init)
</UL>
<P><STRONG><a name="[ce]"></a>llif_udpgroup_write</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, llif_udpgroup.o(i.llif_udpgroup_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = llif_udpgroup_write &rArr; udp_group_send_data &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_send_data_to_rb
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_send_data (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llif_udpgroup.o(i.llif_udpgroup_init)
</UL>
<P><STRONG><a name="[263]"></a>lwip_htonl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[271]"></a>lwip_htons</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>

<P><STRONG><a name="[267]"></a>lwip_ntohl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_ntohl))
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2b6]"></a>lwip_ntohs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_ntohs))
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[1bc]"></a>lwip_periodic_handle</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, netconf.o(i.lwip_periodic_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lwip_periodic_handle &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Handle
</UL>

<P><STRONG><a name="[1bb]"></a>lwip_pkt_handle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netconf.o(i.lwip_pkt_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lwip_pkt_handle &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Network_Handle
</UL>

<P><STRONG><a name="[1b3]"></a>lwip_stack_init</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, netconf.o(i.lwip_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = lwip_stack_init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lwip_Init
</UL>

<P><STRONG><a name="[68]"></a>main</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_TmrInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2]"></a>man</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, cli_cmd.o(i.man))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = man &rArr; cmd_usage &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_usage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_cmd.o(debug_cmd.item.1)
</UL>
<P><STRONG><a name="[2e6]"></a>mem_free</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[2e0]"></a>mem_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_stack_init
</UL>

<P><STRONG><a name="[2f1]"></a>mem_malloc</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[2f4]"></a>mem_trim</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[2bb]"></a>memp_free</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_all
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>

<P><STRONG><a name="[2e1]"></a>memp_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = memp_init &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_all
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_stack_init
</UL>

<P><STRONG><a name="[2af]"></a>memp_malloc_fn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, memp.o(i.memp_malloc_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = memp_malloc_fn &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_all
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>

<P><STRONG><a name="[2e2]"></a>netif_add</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_stack_init
</UL>

<P><STRONG><a name="[2ed]"></a>netif_set_addr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[2e3]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_stack_init
</UL>

<P><STRONG><a name="[2f0]"></a>netif_set_gw</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[2ee]"></a>netif_set_ipaddr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[2ef]"></a>netif_set_netmask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[2e4]"></a>netif_set_up</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_stack_init
</UL>

<P><STRONG><a name="[146]"></a>nvic_irq_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f4xx_misc.o(i.nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Set
</UL>

<P><STRONG><a name="[13c]"></a>nvic_irq_enable</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gd32f4xx_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can0_config
</UL>

<P><STRONG><a name="[151]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
</UL>

<P><STRONG><a name="[2e5]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[262]"></a>pbuf_alloc</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_send_data_by_pbuf (via Veneer)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[2b8]"></a>pbuf_alloced_custom</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_alloced_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[2b9]"></a>pbuf_cat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[2f2]"></a>pbuf_chain</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_chain &rArr; pbuf_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[2c1]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[291]"></a>pbuf_copy</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[2f3]"></a>pbuf_copy_partial</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[26d]"></a>pbuf_free</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_exit
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_send_data_by_pbuf (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_recv (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_recv (via Veneer)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_recv
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_ip_search_recv
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[28b]"></a>pbuf_header</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[26a]"></a>pbuf_realloc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[292]"></a>pbuf_ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[2f5]"></a>pbuf_take</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_take
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_send_data_by_pbuf (via Veneer)
</UL>

<P><STRONG><a name="[29f]"></a>ping_callback</STRONG> (Thumb, 144 bytes, Stack size 232 bytes, telnet.o(i.ping_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ping_callback &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_sem_post
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[2fc]"></a>ping_prepare_echo</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, telnet.o(i.ping_prepare_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ping_prepare_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
</UL>

<P><STRONG><a name="[1ad]"></a>ping_proc</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, telnet.o(i.ping_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ping_proc &rArr; ping_proc_end &rArr; Telnet_Display_Cmd_Prompt &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_timeout
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_sem_pend
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc_end
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Task
</UL>

<P><STRONG><a name="[2fb]"></a>ping_proc_end</STRONG> (Thumb, 92 bytes, Stack size 136 bytes, telnet.o(i.ping_proc_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ping_proc_end &rArr; Telnet_Display_Cmd_Prompt &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_Display_Cmd_Prompt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
</UL>

<P><STRONG><a name="[2f8]"></a>ping_sem_pend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, telnet.o(i.ping_sem_pend))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
</UL>

<P><STRONG><a name="[2f7]"></a>ping_sem_post</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, telnet.o(i.ping_sem_post))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_callback
</UL>

<P><STRONG><a name="[2f9]"></a>ping_send</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, telnet.o(i.ping_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ping_send &rArr; raw_sendto &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
</UL>

<P><STRONG><a name="[2fa]"></a>ping_timeout</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, telnet.o(i.ping_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ping_timeout &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
</UL>

<P><STRONG><a name="[135]"></a>pmu_backup_write_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_pmu.o(i.pmu_backup_write_enable))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[2bd]"></a>raw_input</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[2a2]"></a>raw_new</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, raw.o(i.raw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = raw_new &rArr; memp_malloc_fn &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_pcb_init
</UL>

<P><STRONG><a name="[2fd]"></a>raw_sendto</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, raw.o(i.raw_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = raw_sendto &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
</UL>

<P><STRONG><a name="[139]"></a>rcu_all_reset_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_all_reset_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[27b]"></a>rcu_ckout0_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_ckout0_config))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_gpio_config
</UL>

<P><STRONG><a name="[12a]"></a>rcu_clock_freq_get</STRONG> (Thumb, 200 bytes, Stack size 52 bytes, gd32f4xx_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_phy_config
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_ClkFreq
</UL>

<P><STRONG><a name="[138]"></a>rcu_flag_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>

<P><STRONG><a name="[218]"></a>rcu_osci_on</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_osci_on))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Pre_Config
</UL>

<P><STRONG><a name="[219]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, gd32f4xx_rcu.o(i.rcu_osci_stab_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcu_osci_stab_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Pre_Config
</UL>

<P><STRONG><a name="[12c]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPO_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPI_Poll_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_mac_dma_config
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_gpio_config
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Pre_Config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can0_gpio_config
</UL>

<P><STRONG><a name="[256]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_deinit
</UL>

<P><STRONG><a name="[255]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_deinit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_deinit
</UL>

<P><STRONG><a name="[21a]"></a>rcu_rtc_clock_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_rtc_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Pre_Config
</UL>

<P><STRONG><a name="[1]"></a>reboot</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, cli_cmd.o(i.reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = reboot &rArr; cmd_usage &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_data_send
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_ModuleReset
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_Reset
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_usage
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_cmd.o(debug_cmd.item.1)
</UL>
<P><STRONG><a name="[143]"></a>rtc_current_time_get</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, gd32f4xx_rtc.o(i.rtc_current_time_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rtc_current_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Get
</UL>

<P><STRONG><a name="[13d]"></a>rtc_flag_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_rtc.o(i.rtc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[21c]"></a>rtc_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_rtc.o(i.rtc_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>rtc_init</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, gd32f4xx_rtc.o(i.rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtc_init &rArr; rtc_register_sync_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_register_sync_wait
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_mode_exit
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Set
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Setup
</UL>

<P><STRONG><a name="[300]"></a>rtc_init_mode_enter</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gd32f4xx_rtc.o(i.rtc_init_mode_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_init_mode_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[301]"></a>rtc_init_mode_exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_rtc.o(i.rtc_init_mode_exit))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[147]"></a>rtc_interrupt_disable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32f4xx_rtc.o(i.rtc_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Set
</UL>

<P><STRONG><a name="[13e]"></a>rtc_interrupt_enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32f4xx_rtc.o(i.rtc_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[21b]"></a>rtc_register_sync_wait</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, gd32f4xx_rtc.o(i.rtc_register_sync_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rtc_register_sync_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Pre_Config
</UL>

<P><STRONG><a name="[13f]"></a>rtc_wakeup_clock_set</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, gd32f4xx_rtc.o(i.rtc_wakeup_clock_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rtc_wakeup_clock_set
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[148]"></a>rtc_wakeup_disable</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gd32f4xx_rtc.o(i.rtc_wakeup_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_wakeup_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Set
</UL>

<P><STRONG><a name="[141]"></a>rtc_wakeup_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f4xx_rtc.o(i.rtc_wakeup_enable))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[140]"></a>rtc_wakeup_timer_set</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, gd32f4xx_rtc.o(i.rtc_wakeup_timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rtc_wakeup_timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[4]"></a>runtime</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, cli_cmd.o(i.runtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = runtime &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_data_send
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_cmd.o(debug_cmd.item.1)
</UL>
<P><STRONG><a name="[3]"></a>set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cli_cmd.o(i.set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = set &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_cmd.o(debug_cmd.item.1)
</UL>
<P><STRONG><a name="[f9]"></a>sys_debug_uart_data_handle</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, console_uart.o(i.sys_debug_uart_data_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = sys_debug_uart_data_handle &rArr; debug_uart_recv &rArr; debug_uart_cmd_process &rArr; find_cmd &rArr; cmd_call &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_recv
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_data_send
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console_uart.o(period.item.4)
</UL>
<P><STRONG><a name="[f4]"></a>sys_debug_uart_init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, console_uart.o(i.sys_debug_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sys_debug_uart_init &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console_uart.o(init.item.3)
</UL>
<P><STRONG><a name="[2f6]"></a>sys_now</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netconf.o(i.sys_now))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_send
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_callback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
</UL>

<P><STRONG><a name="[302]"></a>sys_timeout</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, timers.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sys_timeout &rArr; memp_malloc_fn &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>

<P><STRONG><a name="[27c]"></a>syscfg_enet_phy_interface_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_syscfg.o(i.syscfg_enet_phy_interface_config))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_gpio_config
</UL>

<P><STRONG><a name="[303]"></a>tcp_abandon</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[192]"></a>tcp_abort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLogSendPeriodHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_recv (via Veneer)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_recv
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
</UL>

<P><STRONG><a name="[234]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_init
</UL>

<P><STRONG><a name="[307]"></a>tcp_alloc</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[32a]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_accept
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_reinit
</UL>

<P><STRONG><a name="[232]"></a>tcp_bind</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_reinit
</UL>

<P><STRONG><a name="[db]"></a>tcp_client_connect</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tcpclient.o(i.tcp_client_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_client_connect &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tcpclient.o(i.tcpclient_reinit)
<LI> tcpclient.o(i.tcpclient_init)
</UL>
<P><STRONG><a name="[325]"></a>tcp_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_close))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_poll
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_exit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_accept
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_poll
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_accept
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_recv (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_recv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_poll
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[310]"></a>tcp_connect</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_reinit
</UL>

<P><STRONG><a name="[311]"></a>tcp_eff_send_mss</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[312]"></a>tcp_enqueue_flags</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[32b]"></a>tcp_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_err))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_accept
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_accept
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_reinit
</UL>

<P><STRONG><a name="[315]"></a>tcp_fasttmr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[2bf]"></a>tcp_input</STRONG> (Thumb, 814 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[31a]"></a>tcp_keepalive</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[233]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_init
</UL>

<P><STRONG><a name="[231]"></a>tcp_new</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_period
</UL>

<P><STRONG><a name="[30a]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[191]"></a>tcp_output</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_poll
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_accept
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_Delete_Remote_Cmdline
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLogSendPeriodHandler
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_send_data
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_send_data
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[30e]"></a>tcp_pcb_purge</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[304]"></a>tcp_pcb_remove</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[32d]"></a>tcp_poll</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_accept
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_accept
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_reinit
</UL>

<P><STRONG><a name="[316]"></a>tcp_process_refused_data</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[32c]"></a>tcp_recv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_accept
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_accept
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_reinit
</UL>

<P><STRONG><a name="[d4]"></a>tcp_recv_null</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[324]"></a>tcp_recved</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_recv (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_recv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[321]"></a>tcp_rexmit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[322]"></a>tcp_rexmit_fast</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[326]"></a>tcp_rexmit_rto</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[306]"></a>tcp_rst</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[314]"></a>tcp_seg_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[305]"></a>tcp_segs_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[31d]"></a>tcp_send_empty_ack</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[30f]"></a>tcp_send_fin</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[32e]"></a>tcp_sent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_accept
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_accept
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_reinit
</UL>

<P><STRONG><a name="[327]"></a>tcp_slowtmr</STRONG> (Thumb, 608 bytes, Stack size 40 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_slowtmr &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[30c]"></a>tcp_timer_needed</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[2df]"></a>tcp_tmr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_periodic_handle
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>

<P><STRONG><a name="[323]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[190]"></a>tcp_write</STRONG> (Thumb, 686 bytes, Stack size 96 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_call
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_timeout
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc_end
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_callback
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_Display_Cmd_Prompt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_poll
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_cmd_process
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_accept
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_Delete_Remote_Cmdline
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLogSendPeriodHandler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtime
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_usage
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_send_data
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_send_data
</UL>

<P><STRONG><a name="[328]"></a>tcp_zero_window_probe</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[d7]"></a>tcpclient_conn_err</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tcpclient.o(i.tcpclient_conn_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcpclient_conn_err &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tcpclient.o(i.tcpclient_reinit)
<LI> tcpclient.o(i.tcpclient_init)
</UL>
<P><STRONG><a name="[2cb]"></a>tcpclient_init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, tcpclient.o(i.tcpclient_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tcpclient_init &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpClientBuff_Init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpclient_open
</UL>

<P><STRONG><a name="[fc]"></a>tcpclient_period</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tcpclient.o(i.tcpclient_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tcpclient_period &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Delay_Reset
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_reinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpclient.o(period.item.4)
</UL>
<P><STRONG><a name="[2cc]"></a>tcpclient_read_data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcpclient.o(i.tcpclient_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcpclient_read_data &rArr; TcpClientBuff_Pop &rArr; Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpClientBuff_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpclient_read
</UL>

<P><STRONG><a name="[32f]"></a>tcpclient_reinit</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tcpclient.o(i.tcpclient_reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = tcpclient_reinit &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpclient_period
</UL>

<P><STRONG><a name="[2cd]"></a>tcpclient_send_data</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, tcpclient.o(i.tcpclient_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = tcpclient_send_data &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpclient_write
</UL>

<P><STRONG><a name="[dd]"></a>tcpserver_conn_err</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, tcpserver.o(i.tcpserver_conn_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcpserver_conn_err &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpserver.o(i.tcpserver_accept)
</UL>
<P><STRONG><a name="[2ce]"></a>tcpserver_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tcpserver.o(i.tcpserver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tcpserver_init &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerBuff_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpserver_open
</UL>

<P><STRONG><a name="[2cf]"></a>tcpserver_read_data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcpserver.o(i.tcpserver_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcpserver_read_data &rArr; TcpServerBuff_Pop &rArr; Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerBuff_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpserver_read
</UL>

<P><STRONG><a name="[2d0]"></a>tcpserver_send_data</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, tcpserver.o(i.tcpserver_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = tcpserver_send_data &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_tcpserver_write
</UL>

<P><STRONG><a name="[e3]"></a>telnet_conn_err</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, telnet.o(i.telnet_conn_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = telnet_conn_err &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telnet.o(i.telnet_accept)
</UL>
<P><STRONG><a name="[332]"></a>udp_bind</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_ip_search_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
</UL>

<P><STRONG><a name="[272]"></a>udp_connect</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[2d4]"></a>udp_group_init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, udpgroup.o(i.udp_group_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = udp_group_init &rArr; igmp_joingroup &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupSendBuff_Init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupBuff_Init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udpgroup_open
</UL>

<P><STRONG><a name="[2d5]"></a>udp_group_read_data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, udpgroup.o(i.udp_group_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_group_read_data &rArr; UdpGroupBuff_Pop &rArr; Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupBuff_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udpgroup_read
</UL>

<P><STRONG><a name="[2d6]"></a>udp_group_send_data_to_rb</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, udpgroup.o(i.udp_group_send_data_to_rb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = udp_group_send_data_to_rb &rArr; UdpGroupSendBuff_Push &rArr; Ringbuff_Push &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupSendBuff_Push
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupSendBuff_GetFreeSize
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udpgroup_write
</UL>

<P><STRONG><a name="[2be]"></a>udp_input</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[2d1]"></a>udp_ip_search_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, udp_ip_search.o(i.udp_ip_search_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = udp_ip_search_init &rArr; udp_new &rArr; memp_malloc_fn &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpBuff_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udp_open
</UL>

<P><STRONG><a name="[2d2]"></a>udp_ip_search_read_data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, udp_ip_search.o(i.udp_ip_search_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_ip_search_read_data &rArr; UdpBuff_Pop &rArr; Ringbuff_Pop
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpBuff_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udp_read
</UL>

<P><STRONG><a name="[e6]"></a>udp_ip_search_recv</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, udp_ip_search.o(i.udp_ip_search_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = udp_ip_search_recv &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpBuff_Push
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpBuff_GetFreeSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udp_ip_search.o(i.udp_ip_search_init)
</UL>
<P><STRONG><a name="[2d3]"></a>udp_ip_search_send_data</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, udp_ip_search.o(i.udp_ip_search_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = udp_ip_search_send_data &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udp_write
</UL>

<P><STRONG><a name="[334]"></a>udp_new</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = udp_new &rArr; memp_malloc_fn &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_ip_search_init
</UL>

<P><STRONG><a name="[335]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_ip_search_init
</UL>

<P><STRONG><a name="[fa]"></a>udp_send_period</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, udpgroup.o(i.udp_send_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = udp_send_period &rArr; udp_group_send_data_by_pbuf &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupSendBuff_Pop
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupSendBuff_GetUsedSize
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_send_data_by_pbuf (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udpgroup.o(period.item.4)
</UL>
<P><STRONG><a name="[273]"></a>udp_sendto</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_send_data (via Veneer)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_group_send_data_by_pbuf (via Veneer)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_ip_search_send_data
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[26b]"></a>udp_sendto_if</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[14e]"></a>usart_baudrate_set</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, gd32f4xx_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
</UL>

<P><STRONG><a name="[237]"></a>usart_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Send_Char
</UL>

<P><STRONG><a name="[14d]"></a>usart_deinit</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
</UL>

<P><STRONG><a name="[15c]"></a>usart_dma_receive_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_dma_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Receive
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Restart
</UL>

<P><STRONG><a name="[15f]"></a>usart_dma_transmit_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_dma_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_SendSucc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Tx_DMA_Start
</UL>

<P><STRONG><a name="[153]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
</UL>

<P><STRONG><a name="[16c]"></a>usart_flag_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_Send_Char
</UL>

<P><STRONG><a name="[152]"></a>usart_interrupt_enable</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
</UL>

<P><STRONG><a name="[236]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>usart_receive_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
</UL>

<P><STRONG><a name="[150]"></a>usart_transmit_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USARTx_DMA_Init
</UL>

<P><STRONG><a name="[e5]"></a>udp_group_recv</STRONG> (Thumb, 228 bytes, Stack size 72 bytes, udpgroup.o(RAMCODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = udp_group_recv &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog (via Veneer)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupBuff_Push (via Veneer)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UdpGroupBuff_GetFreeSize (via Veneer)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udpgroup.o(i.udp_group_init)
</UL>
<P><STRONG><a name="[336]"></a>udp_group_send_data_by_pbuf</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, udpgroup.o(RAMCODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = udp_group_send_data_by_pbuf &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free (via Veneer)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog (via Veneer)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto (via Veneer)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send_period (via Veneer)
</UL>

<P><STRONG><a name="[2d7]"></a>udp_group_send_data</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, udpgroup.o(RAMCODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = udp_group_send_data &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog (via Veneer)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llif_udpgroup_write (via Veneer)
</UL>

<P><STRONG><a name="[23]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, gd32f4xx_it.o(RAMCODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CAN0_RX0_IRQHandler &rArr; CanSimpleBuff_Push &rArr; Ringbuff_Push &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSimpleBuff_Push (via Veneer)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSimpleBuff_GetFreeSize (via Veneer)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, gd32f4xx_it.o(RAMCODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CAN0_RX1_IRQHandler &rArr; CanSimpleBuff_Push &rArr; Ringbuff_Push &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSimpleBuff_Push (via Veneer)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSimpleBuff_GetFreeSize (via Veneer)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_message_receive (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1a7]"></a>Find_Telnet_Next_Cmd</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, telnet.o(i.Find_Telnet_Next_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Find_Telnet_Next_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
</UL>

<P><STRONG><a name="[1a8]"></a>Find_Telnet_Prev_Cmd</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, telnet.o(i.Find_Telnet_Prev_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Find_Telnet_Prev_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
</UL>

<P><STRONG><a name="[1b0]"></a>Insert_Telnet_Cmd</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, telnet.o(i.Insert_Telnet_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Insert_Telnet_Cmd &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_cmd_process
</UL>

<P><STRONG><a name="[22f]"></a>Telnet_Delete_Remote_Cmdline</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, telnet.o(i.Telnet_Delete_Remote_Cmdline))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = Telnet_Delete_Remote_Cmdline &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
</UL>

<P><STRONG><a name="[a3]"></a>telnet_accept</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, telnet.o(i.telnet_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = telnet_accept &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telnet.o(i.Telnet_Init)
</UL>
<P><STRONG><a name="[330]"></a>telnet_cmd_process</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, telnet.o(i.telnet_cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = telnet_cmd_process &rArr; find_cmd &rArr; cmd_call &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_parse_info
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_Telnet_Cmd
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
</UL>

<P><STRONG><a name="[331]"></a>telnet_exit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, telnet.o(i.telnet_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = telnet_exit &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_recv
</UL>

<P><STRONG><a name="[e4]"></a>telnet_poll</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, telnet.o(i.telnet_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = telnet_poll &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telnet.o(i.telnet_accept)
</UL>
<P><STRONG><a name="[e1]"></a>telnet_recv</STRONG> (Thumb, 2076 bytes, Stack size 192 bytes, telnet.o(i.telnet_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = telnet_recv &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_Display_Cmd_Prompt
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_exit
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telnet_cmd_process
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Telnet_Delete_Remote_Cmdline
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Telnet_Prev_Cmd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Telnet_Next_Cmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> telnet.o(i.telnet_accept)
</UL>
<P><STRONG><a name="[e2]"></a>telnet_sent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, telnet.o(i.telnet_sent))
<BR>[Address Reference Count : 1]<UL><LI> telnet.o(i.telnet_accept)
</UL>
<P><STRONG><a name="[257]"></a>cmd_call</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cli_cmd.o(i.cmd_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = cmd_call &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_data_send
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
</UL>

<P><STRONG><a name="[193]"></a>Debug_Uart_Delete_Remote_Cmdline</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, console_uart.o(i.Debug_Uart_Delete_Remote_Cmdline))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Debug_Uart_Delete_Remote_Cmdline &rArr; debug_uart_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_data_send
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_recv
</UL>

<P><STRONG><a name="[1a4]"></a>Find_Debug_Uart_Next_Cmd</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, console_uart.o(i.Find_Debug_Uart_Next_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Find_Debug_Uart_Next_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_recv
</UL>

<P><STRONG><a name="[1a6]"></a>Find_Debug_Uart_Prev_Cmd</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, console_uart.o(i.Find_Debug_Uart_Prev_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Find_Debug_Uart_Prev_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_recv
</UL>

<P><STRONG><a name="[1ae]"></a>Insert_Debug_Uart_Cmd</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, console_uart.o(i.Insert_Debug_Uart_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Insert_Debug_Uart_Cmd &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_cmd_process
</UL>

<P><STRONG><a name="[25d]"></a>debug_uart_recv</STRONG> (Thumb, 1694 bytes, Stack size 160 bytes, console_uart.o(i.debug_uart_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = debug_uart_recv &rArr; debug_uart_cmd_process &rArr; find_cmd &rArr; cmd_call &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_cmd_process
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Uart_Display_Cmd_Prompt
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Debug_Uart_Prev_Cmd
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Debug_Uart_Next_Cmd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Uart_Delete_Remote_Cmdline
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_data_send
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_debug_uart_data_handle
</UL>

<P><STRONG><a name="[dc]"></a>tcpserver_recv</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, tcpserver.o(RAMCODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tcpserver_recv &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved (via Veneer)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort (via Veneer)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog (via Veneer)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerBuff_Push (via Veneer)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpServerBuff_GetFreeSize (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpserver.o(i.tcpserver_accept)
</UL>
<P><STRONG><a name="[e0]"></a>tcpserver_accept</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, tcpserver.o(i.tcpserver_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcpserver_accept &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpserver.o(i.tcpserver_init)
</UL>
<P><STRONG><a name="[de]"></a>tcpserver_poll</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tcpserver.o(i.tcpserver_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcpserver_poll &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpserver.o(i.tcpserver_accept)
</UL>
<P><STRONG><a name="[df]"></a>tcpserver_sent</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, tcpserver.o(i.tcpserver_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcpserver_sent &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpserver.o(i.tcpserver_accept)
</UL>
<P><STRONG><a name="[16f]"></a>NVIC_SystemReset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[284]"></a>NVIC_SystemReset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_enet.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_system_setup
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_mac_dma_config
</UL>

<P><STRONG><a name="[27a]"></a>enet_gpio_config</STRONG> (Thumb, 442 bytes, Stack size 24 bytes, bsp_enet.o(i.enet_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = enet_gpio_config &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_enet_phy_interface_config
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_ckout0_config
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_system_setup
</UL>

<P><STRONG><a name="[282]"></a>enet_mac_dma_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bsp_enet.o(i.enet_mac_dma_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = enet_mac_dma_config &rArr; enet_init &rArr; enet_phy_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_software_reset
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_deinit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_system_setup
</UL>

<P><STRONG><a name="[19f]"></a>GetSectorMapIndex</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, bsp_flash_if.o(i.GetSectorMapIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSectorMapIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Erase
</UL>

<P><STRONG><a name="[144]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Get
</UL>

<P><STRONG><a name="[149]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Rtc_Time_Set
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Setup
</UL>

<P><STRONG><a name="[d9]"></a>tcpclient_poll</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, tcpclient.o(i.tcpclient_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcpclient_poll &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tcpclient.o(i.tcpclient_reinit)
<LI> tcpclient.o(i.tcpclient_init)
</UL>
<P><STRONG><a name="[d8]"></a>tcpclient_recv</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, tcpclient.o(i.tcpclient_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tcpclient_recv &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpClientBuff_Push
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpClientBuff_GetFreeSize
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tcpclient.o(i.tcpclient_reinit)
<LI> tcpclient.o(i.tcpclient_init)
</UL>
<P><STRONG><a name="[da]"></a>tcpclient_sent</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, tcpclient.o(i.tcpclient_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcpclient_sent &rArr; DbgLog &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgLog
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tcpclient.o(i.tcpclient_reinit)
<LI> tcpclient.o(i.tcpclient_init)
</UL>
<P><STRONG><a name="[296]"></a>low_level_init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = low_level_init &rArr; enet_descriptors_chain_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_transmit_checksum_config
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_rx_desc_immediate_receive_complete_interrupt
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_mac_address_set
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_enable
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_descriptors_chain_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[298]"></a>low_level_input</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_frame_receive
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_desc_information_get
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[a7]"></a>low_level_output</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = low_level_output &rArr; enet_frame_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_frame_transmit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_desc_information_get
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[261]"></a>dhcp_create_msg</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[260]"></a>dhcp_decline</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[26c]"></a>dhcp_delete_msg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_delete_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[264]"></a>dhcp_option</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[265]"></a>dhcp_option_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[268]"></a>dhcp_option_long</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[269]"></a>dhcp_option_trailer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[266]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[26e]"></a>dns_check_entries</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dns.o(i.dns_check_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[26f]"></a>dns_check_entry</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, dns.o(i.dns_check_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>

<P><STRONG><a name="[270]"></a>dns_send</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, dns.o(i.dns_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[2e7]"></a>plug_holes</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[2e8]"></a>memp_overflow_check_all</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, memp.o(i.memp_overflow_check_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[2ea]"></a>memp_overflow_check_element_overflow</STRONG> (Thumb, 100 bytes, Stack size 152 bytes, memp.o(i.memp_overflow_check_element_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = memp_overflow_check_element_overflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_all
</UL>

<P><STRONG><a name="[2eb]"></a>memp_overflow_check_element_underflow</STRONG> (Thumb, 92 bytes, Stack size 152 bytes, memp.o(i.memp_overflow_check_element_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_all
</UL>

<P><STRONG><a name="[2e9]"></a>memp_overflow_init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, memp.o(i.memp_overflow_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = memp_overflow_init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
</UL>

<P><STRONG><a name="[d5]"></a>tcp_accept_null</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept_null))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_listen_with_backlog)
</UL>
<P><STRONG><a name="[30d]"></a>tcp_close_shutdown</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, tcp.o(i.tcp_close_shutdown), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[309]"></a>tcp_kill_prio</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[308]"></a>tcp_kill_timewait</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[30b]"></a>tcp_new_port</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[318]"></a>tcp_listen_input</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[31c]"></a>tcp_parseopt</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[319]"></a>tcp_process</STRONG> (Thumb, 1014 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[320]"></a>tcp_receive</STRONG> (Thumb, 1078 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[317]"></a>tcp_timewait_input</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[313]"></a>tcp_create_segment</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[31b]"></a>tcp_output_alloc_header</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[31e]"></a>tcp_output_segment</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[31f]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[329]"></a>tcp_write_checks</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[d6]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timers.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timers.o(i.tcp_timer_needed)
<LI> timers.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[333]"></a>udp_new_port</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, udp.o(i.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[29d]"></a>icmp_send_response</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[2a6]"></a>igmp_delaying_member</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, igmp.o(i.igmp_delaying_member))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_delaying_member
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
</UL>

<P><STRONG><a name="[2aa]"></a>igmp_ip_output_if</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, igmp.o(i.igmp_ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>

<P><STRONG><a name="[2ad]"></a>igmp_lookup_group</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, igmp.o(i.igmp_lookup_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = igmp_lookup_group &rArr; memp_malloc_fn &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
</UL>

<P><STRONG><a name="[2ae]"></a>igmp_send</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, igmp.o(i.igmp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>

<P><STRONG><a name="[2a7]"></a>igmp_start_timer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, igmp.o(i.igmp_start_timer))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>

<P><STRONG><a name="[2b2]"></a>igmp_timeout</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, igmp.o(i.igmp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = igmp_timeout &rArr; igmp_send &rArr; igmp_ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
</UL>

<P><STRONG><a name="[2b4]"></a>lwip_standard_chksum</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[2b7]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ip_frag.o(i.ip_frag_alloc_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ip_frag_alloc_pbuf_custom_ref &rArr; memp_malloc_fn &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[2ba]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ip_frag.o(i.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[2c4]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, ip_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[2c5]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ip_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[2c3]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_enqueue_new_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[2c6]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ip_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[2c2]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ip_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[a8]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ip_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip_frag.o(i.ip_frag)
</UL>
<P><STRONG><a name="[287]"></a>etharp_arp_input</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = etharp_arp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_output_if_opt &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[289]"></a>etharp_find_entry</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[28a]"></a>etharp_free_entry</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[28d]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[293]"></a>etharp_raw</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[28e]"></a>etharp_send_ip</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[288]"></a>etharp_update_arp_entry</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; memp_overflow_check_all &rArr; memp_overflow_check_element_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; hard_fault_handler_c &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[280]"></a>enet_default_init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_default_init))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_init
</UL>

<P><STRONG><a name="[27f]"></a>enet_delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_enet.o(i.enet_delay))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_phy_config
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enet_init
</UL>

<P><STRONG><a name="[213]"></a>OS_TickListUpdateDly</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, os_tick.o(i.OS_TickListUpdateDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TickListUpdateDly &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[214]"></a>OS_TickListUpdateTimeout</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, os_tick.o(i.OS_TickListUpdateTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = OS_TickListUpdateTimeout &rArr; OS_TaskChangePrio &rArr; OS_PendListChangePrio &rArr; OS_PendListInsertPrio
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickTask
</UL>

<P><STRONG><a name="[215]"></a>OS_TmrLock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, os_tmr.o(i.OS_TmrLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = OS_TmrLock &rArr; OSMutexPend &rArr; OS_TaskChangePrio &rArr; OS_PendListChangePrio &rArr; OS_PendListInsertPrio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[217]"></a>OS_TmrUnlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_tmr.o(i.OS_TmrUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OS_TmrUnlock &rArr; OSMutexPost &rArr; OS_Post &rArr; OS_PendListRemove &rArr; OS_PendListRemove1
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TmrTask
</UL>

<P><STRONG><a name="[172]"></a>CPU_IntDisMeasInit</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cpu_core.o(i.CPU_IntDisMeasInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = CPU_IntDisMeasInit &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[179]"></a>CPU_IntDisMeasMaxCalc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cpu_core.o(i.CPU_IntDisMeasMaxCalc))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxGet
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
</UL>

<P><STRONG><a name="[173]"></a>CPU_NameInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_core.o(i.CPU_NameInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = CPU_NameInit &rArr; CPU_NameClr &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_NameClr
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[171]"></a>CPU_TS_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cpu_core.o(i.CPU_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CPU_TS_Init &rArr; CPU_TS_TmrInit &rArr; BSP_CPU_ClkFreq &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[24c]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[248]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[24f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[24e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a5]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
